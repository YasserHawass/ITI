// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package tal1.imdb_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: imdb Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class imdb implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "imdb";
	private final String projectName = "TAL1";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				imdb.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(imdb.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputJSON_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_TAL1_imdb = new byte[0];
    static byte[] commonByteArray_TAL1_imdb = new byte[0];

	
			    public Integer X;

				public Integer getX () {
					return this.X;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String MetaCritic;

				public String getMetaCritic () {
					return this.MetaCritic;
				}
				
			    public String Runtime;

				public String getRuntime () {
					return this.Runtime;
				}
				
			    public Integer CVotes10;

				public Integer getCVotes10 () {
					return this.CVotes10;
				}
				
			    public Integer CVotes09;

				public Integer getCVotes09 () {
					return this.CVotes09;
				}
				
			    public Integer CVotes08;

				public Integer getCVotes08 () {
					return this.CVotes08;
				}
				
			    public Integer CVotes07;

				public Integer getCVotes07 () {
					return this.CVotes07;
				}
				
			    public Integer CVotes06;

				public Integer getCVotes06 () {
					return this.CVotes06;
				}
				
			    public Integer CVotes05;

				public Integer getCVotes05 () {
					return this.CVotes05;
				}
				
			    public Integer CVotes04;

				public Integer getCVotes04 () {
					return this.CVotes04;
				}
				
			    public Integer CVotes03;

				public Integer getCVotes03 () {
					return this.CVotes03;
				}
				
			    public Integer CVotes02;

				public Integer getCVotes02 () {
					return this.CVotes02;
				}
				
			    public Integer CVotes01;

				public Integer getCVotes01 () {
					return this.CVotes01;
				}
				
			    public Integer CVotesMale;

				public Integer getCVotesMale () {
					return this.CVotesMale;
				}
				
			    public Integer CVotesFemale;

				public Integer getCVotesFemale () {
					return this.CVotesFemale;
				}
				
			    public Integer CVotesU18;

				public Integer getCVotesU18 () {
					return this.CVotesU18;
				}
				
			    public Integer CVotesU18M;

				public Integer getCVotesU18M () {
					return this.CVotesU18M;
				}
				
			    public Integer CVotesU18F;

				public Integer getCVotesU18F () {
					return this.CVotesU18F;
				}
				
			    public Integer CVotes1829;

				public Integer getCVotes1829 () {
					return this.CVotes1829;
				}
				
			    public Integer CVotes1829M;

				public Integer getCVotes1829M () {
					return this.CVotes1829M;
				}
				
			    public Integer CVotes1829F;

				public Integer getCVotes1829F () {
					return this.CVotes1829F;
				}
				
			    public Integer CVotes3044;

				public Integer getCVotes3044 () {
					return this.CVotes3044;
				}
				
			    public Integer CVotes3044M;

				public Integer getCVotes3044M () {
					return this.CVotes3044M;
				}
				
			    public Integer CVotes3044F;

				public Integer getCVotes3044F () {
					return this.CVotes3044F;
				}
				
			    public Integer CVotes45A;

				public Integer getCVotes45A () {
					return this.CVotes45A;
				}
				
			    public Integer CVotes45AM;

				public Integer getCVotes45AM () {
					return this.CVotes45AM;
				}
				
			    public Integer CVotes45AF;

				public Integer getCVotes45AF () {
					return this.CVotes45AF;
				}
				
			    public Integer CVotes1000;

				public Integer getCVotes1000 () {
					return this.CVotes1000;
				}
				
			    public Integer CVotesUS;

				public Integer getCVotesUS () {
					return this.CVotesUS;
				}
				
			    public Integer CVotesnUS;

				public Integer getCVotesnUS () {
					return this.CVotesnUS;
				}
				
			    public Float VotesM;

				public Float getVotesM () {
					return this.VotesM;
				}
				
			    public Float VotesF;

				public Float getVotesF () {
					return this.VotesF;
				}
				
			    public Float VotesU18;

				public Float getVotesU18 () {
					return this.VotesU18;
				}
				
			    public Float VotesU18M;

				public Float getVotesU18M () {
					return this.VotesU18M;
				}
				
			    public Float VotesU18F;

				public Float getVotesU18F () {
					return this.VotesU18F;
				}
				
			    public Float Votes1829;

				public Float getVotes1829 () {
					return this.Votes1829;
				}
				
			    public Float Votes1829M;

				public Float getVotes1829M () {
					return this.Votes1829M;
				}
				
			    public Float Votes1829F;

				public Float getVotes1829F () {
					return this.Votes1829F;
				}
				
			    public Float Votes3044;

				public Float getVotes3044 () {
					return this.Votes3044;
				}
				
			    public Float Votes3044M;

				public Float getVotes3044M () {
					return this.Votes3044M;
				}
				
			    public Float Votes3044F;

				public Float getVotes3044F () {
					return this.Votes3044F;
				}
				
			    public Float Votes45A;

				public Float getVotes45A () {
					return this.Votes45A;
				}
				
			    public Float Votes45AM;

				public Float getVotes45AM () {
					return this.Votes45AM;
				}
				
			    public Float Votes45AF;

				public Float getVotes45AF () {
					return this.Votes45AF;
				}
				
			    public Float VotesIMDB;

				public Float getVotesIMDB () {
					return this.VotesIMDB;
				}
				
			    public Float Votes1000;

				public Float getVotes1000 () {
					return this.Votes1000;
				}
				
			    public Float VotesnUS;

				public Float getVotesnUS () {
					return this.VotesnUS;
				}
				
			    public Integer TotalVotes;

				public Integer getTotalVotes () {
					return this.TotalVotes;
				}
				
			    public String Budget;

				public String getBudget () {
					return this.Budget;
				}
				
			    public String Domestic;

				public String getDomestic () {
					return this.Domestic;
				}
				
			    public String Foreign;

				public String getForeign () {
					return this.Foreign;
				}
				
			    public Float VotesUS;

				public Float getVotesUS () {
					return this.VotesUS;
				}
				
			    public String Worldwide;

				public String getWorldwide () {
					return this.Worldwide;
				}
				
			    public Float Rating;

				public Float getRating () {
					return this.Rating;
				}
				
			    public String Genre1;

				public String getGenre1 () {
					return this.Genre1;
				}
				
			    public String Genre2;

				public String getGenre2 () {
					return this.Genre2;
				}
				
			    public String Genre3;

				public String getGenre3 () {
					return this.Genre3;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TAL1_imdb.length) {
				if(length < 1024 && commonByteArray_TAL1_imdb.length == 0) {
   					commonByteArray_TAL1_imdb = new byte[1024];
				} else {
   					commonByteArray_TAL1_imdb = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TAL1_imdb, 0, length);
			strReturn = new String(commonByteArray_TAL1_imdb, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TAL1_imdb.length) {
				if(length < 1024 && commonByteArray_TAL1_imdb.length == 0) {
   					commonByteArray_TAL1_imdb = new byte[1024];
				} else {
   					commonByteArray_TAL1_imdb = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_TAL1_imdb, 0, length);
			strReturn = new String(commonByteArray_TAL1_imdb, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
					this.Title = readString(dis);
					
					this.MetaCritic = readString(dis);
					
					this.Runtime = readString(dis);
					
						this.CVotes10 = readInteger(dis);
					
						this.CVotes09 = readInteger(dis);
					
						this.CVotes08 = readInteger(dis);
					
						this.CVotes07 = readInteger(dis);
					
						this.CVotes06 = readInteger(dis);
					
						this.CVotes05 = readInteger(dis);
					
						this.CVotes04 = readInteger(dis);
					
						this.CVotes03 = readInteger(dis);
					
						this.CVotes02 = readInteger(dis);
					
						this.CVotes01 = readInteger(dis);
					
						this.CVotesMale = readInteger(dis);
					
						this.CVotesFemale = readInteger(dis);
					
						this.CVotesU18 = readInteger(dis);
					
						this.CVotesU18M = readInteger(dis);
					
						this.CVotesU18F = readInteger(dis);
					
						this.CVotes1829 = readInteger(dis);
					
						this.CVotes1829M = readInteger(dis);
					
						this.CVotes1829F = readInteger(dis);
					
						this.CVotes3044 = readInteger(dis);
					
						this.CVotes3044M = readInteger(dis);
					
						this.CVotes3044F = readInteger(dis);
					
						this.CVotes45A = readInteger(dis);
					
						this.CVotes45AM = readInteger(dis);
					
						this.CVotes45AF = readInteger(dis);
					
						this.CVotes1000 = readInteger(dis);
					
						this.CVotesUS = readInteger(dis);
					
						this.CVotesnUS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesM = null;
           				} else {
           			    	this.VotesM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesF = null;
           				} else {
           			    	this.VotesF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18 = null;
           				} else {
           			    	this.VotesU18 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18M = null;
           				} else {
           			    	this.VotesU18M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18F = null;
           				} else {
           			    	this.VotesU18F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829 = null;
           				} else {
           			    	this.Votes1829 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829M = null;
           				} else {
           			    	this.Votes1829M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829F = null;
           				} else {
           			    	this.Votes1829F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044 = null;
           				} else {
           			    	this.Votes3044 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044M = null;
           				} else {
           			    	this.Votes3044M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044F = null;
           				} else {
           			    	this.Votes3044F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45A = null;
           				} else {
           			    	this.Votes45A = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AM = null;
           				} else {
           			    	this.Votes45AM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AF = null;
           				} else {
           			    	this.Votes45AF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesIMDB = null;
           				} else {
           			    	this.VotesIMDB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1000 = null;
           				} else {
           			    	this.Votes1000 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesnUS = null;
           				} else {
           			    	this.VotesnUS = dis.readFloat();
           				}
					
						this.TotalVotes = readInteger(dis);
					
					this.Budget = readString(dis);
					
					this.Domestic = readString(dis);
					
					this.Foreign = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesUS = null;
           				} else {
           			    	this.VotesUS = dis.readFloat();
           				}
					
					this.Worldwide = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Rating = null;
           				} else {
           			    	this.Rating = dis.readFloat();
           				}
					
					this.Genre1 = readString(dis);
					
					this.Genre2 = readString(dis);
					
					this.Genre3 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
					this.Title = readString(dis);
					
					this.MetaCritic = readString(dis);
					
					this.Runtime = readString(dis);
					
						this.CVotes10 = readInteger(dis);
					
						this.CVotes09 = readInteger(dis);
					
						this.CVotes08 = readInteger(dis);
					
						this.CVotes07 = readInteger(dis);
					
						this.CVotes06 = readInteger(dis);
					
						this.CVotes05 = readInteger(dis);
					
						this.CVotes04 = readInteger(dis);
					
						this.CVotes03 = readInteger(dis);
					
						this.CVotes02 = readInteger(dis);
					
						this.CVotes01 = readInteger(dis);
					
						this.CVotesMale = readInteger(dis);
					
						this.CVotesFemale = readInteger(dis);
					
						this.CVotesU18 = readInteger(dis);
					
						this.CVotesU18M = readInteger(dis);
					
						this.CVotesU18F = readInteger(dis);
					
						this.CVotes1829 = readInteger(dis);
					
						this.CVotes1829M = readInteger(dis);
					
						this.CVotes1829F = readInteger(dis);
					
						this.CVotes3044 = readInteger(dis);
					
						this.CVotes3044M = readInteger(dis);
					
						this.CVotes3044F = readInteger(dis);
					
						this.CVotes45A = readInteger(dis);
					
						this.CVotes45AM = readInteger(dis);
					
						this.CVotes45AF = readInteger(dis);
					
						this.CVotes1000 = readInteger(dis);
					
						this.CVotesUS = readInteger(dis);
					
						this.CVotesnUS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesM = null;
           				} else {
           			    	this.VotesM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesF = null;
           				} else {
           			    	this.VotesF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18 = null;
           				} else {
           			    	this.VotesU18 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18M = null;
           				} else {
           			    	this.VotesU18M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18F = null;
           				} else {
           			    	this.VotesU18F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829 = null;
           				} else {
           			    	this.Votes1829 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829M = null;
           				} else {
           			    	this.Votes1829M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829F = null;
           				} else {
           			    	this.Votes1829F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044 = null;
           				} else {
           			    	this.Votes3044 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044M = null;
           				} else {
           			    	this.Votes3044M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044F = null;
           				} else {
           			    	this.Votes3044F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45A = null;
           				} else {
           			    	this.Votes45A = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AM = null;
           				} else {
           			    	this.Votes45AM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AF = null;
           				} else {
           			    	this.Votes45AF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesIMDB = null;
           				} else {
           			    	this.VotesIMDB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1000 = null;
           				} else {
           			    	this.Votes1000 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesnUS = null;
           				} else {
           			    	this.VotesnUS = dis.readFloat();
           				}
					
						this.TotalVotes = readInteger(dis);
					
					this.Budget = readString(dis);
					
					this.Domestic = readString(dis);
					
					this.Foreign = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesUS = null;
           				} else {
           			    	this.VotesUS = dis.readFloat();
           				}
					
					this.Worldwide = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Rating = null;
           				} else {
           			    	this.Rating = dis.readFloat();
           				}
					
					this.Genre1 = readString(dis);
					
					this.Genre2 = readString(dis);
					
					this.Genre3 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MetaCritic,dos);
					
					// String
				
						writeString(this.Runtime,dos);
					
					// Integer
				
						writeInteger(this.CVotes10,dos);
					
					// Integer
				
						writeInteger(this.CVotes09,dos);
					
					// Integer
				
						writeInteger(this.CVotes08,dos);
					
					// Integer
				
						writeInteger(this.CVotes07,dos);
					
					// Integer
				
						writeInteger(this.CVotes06,dos);
					
					// Integer
				
						writeInteger(this.CVotes05,dos);
					
					// Integer
				
						writeInteger(this.CVotes04,dos);
					
					// Integer
				
						writeInteger(this.CVotes03,dos);
					
					// Integer
				
						writeInteger(this.CVotes02,dos);
					
					// Integer
				
						writeInteger(this.CVotes01,dos);
					
					// Integer
				
						writeInteger(this.CVotesMale,dos);
					
					// Integer
				
						writeInteger(this.CVotesFemale,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18M,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18F,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829M,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829F,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044M,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044F,dos);
					
					// Integer
				
						writeInteger(this.CVotes45A,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AM,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AF,dos);
					
					// Integer
				
						writeInteger(this.CVotes1000,dos);
					
					// Integer
				
						writeInteger(this.CVotesUS,dos);
					
					// Integer
				
						writeInteger(this.CVotesnUS,dos);
					
					// Float
				
						if(this.VotesM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesM);
		            	}
					
					// Float
				
						if(this.VotesF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesF);
		            	}
					
					// Float
				
						if(this.VotesU18 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18);
		            	}
					
					// Float
				
						if(this.VotesU18M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18M);
		            	}
					
					// Float
				
						if(this.VotesU18F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18F);
		            	}
					
					// Float
				
						if(this.Votes1829 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829);
		            	}
					
					// Float
				
						if(this.Votes1829M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829M);
		            	}
					
					// Float
				
						if(this.Votes1829F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829F);
		            	}
					
					// Float
				
						if(this.Votes3044 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044);
		            	}
					
					// Float
				
						if(this.Votes3044M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044M);
		            	}
					
					// Float
				
						if(this.Votes3044F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044F);
		            	}
					
					// Float
				
						if(this.Votes45A == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45A);
		            	}
					
					// Float
				
						if(this.Votes45AM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AM);
		            	}
					
					// Float
				
						if(this.Votes45AF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AF);
		            	}
					
					// Float
				
						if(this.VotesIMDB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesIMDB);
		            	}
					
					// Float
				
						if(this.Votes1000 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1000);
		            	}
					
					// Float
				
						if(this.VotesnUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesnUS);
		            	}
					
					// Integer
				
						writeInteger(this.TotalVotes,dos);
					
					// String
				
						writeString(this.Budget,dos);
					
					// String
				
						writeString(this.Domestic,dos);
					
					// String
				
						writeString(this.Foreign,dos);
					
					// Float
				
						if(this.VotesUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesUS);
		            	}
					
					// String
				
						writeString(this.Worldwide,dos);
					
					// Float
				
						if(this.Rating == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Rating);
		            	}
					
					// String
				
						writeString(this.Genre1,dos);
					
					// String
				
						writeString(this.Genre2,dos);
					
					// String
				
						writeString(this.Genre3,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MetaCritic,dos);
					
					// String
				
						writeString(this.Runtime,dos);
					
					// Integer
				
						writeInteger(this.CVotes10,dos);
					
					// Integer
				
						writeInteger(this.CVotes09,dos);
					
					// Integer
				
						writeInteger(this.CVotes08,dos);
					
					// Integer
				
						writeInteger(this.CVotes07,dos);
					
					// Integer
				
						writeInteger(this.CVotes06,dos);
					
					// Integer
				
						writeInteger(this.CVotes05,dos);
					
					// Integer
				
						writeInteger(this.CVotes04,dos);
					
					// Integer
				
						writeInteger(this.CVotes03,dos);
					
					// Integer
				
						writeInteger(this.CVotes02,dos);
					
					// Integer
				
						writeInteger(this.CVotes01,dos);
					
					// Integer
				
						writeInteger(this.CVotesMale,dos);
					
					// Integer
				
						writeInteger(this.CVotesFemale,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18M,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18F,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829M,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829F,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044M,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044F,dos);
					
					// Integer
				
						writeInteger(this.CVotes45A,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AM,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AF,dos);
					
					// Integer
				
						writeInteger(this.CVotes1000,dos);
					
					// Integer
				
						writeInteger(this.CVotesUS,dos);
					
					// Integer
				
						writeInteger(this.CVotesnUS,dos);
					
					// Float
				
						if(this.VotesM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesM);
		            	}
					
					// Float
				
						if(this.VotesF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesF);
		            	}
					
					// Float
				
						if(this.VotesU18 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18);
		            	}
					
					// Float
				
						if(this.VotesU18M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18M);
		            	}
					
					// Float
				
						if(this.VotesU18F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18F);
		            	}
					
					// Float
				
						if(this.Votes1829 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829);
		            	}
					
					// Float
				
						if(this.Votes1829M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829M);
		            	}
					
					// Float
				
						if(this.Votes1829F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829F);
		            	}
					
					// Float
				
						if(this.Votes3044 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044);
		            	}
					
					// Float
				
						if(this.Votes3044M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044M);
		            	}
					
					// Float
				
						if(this.Votes3044F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044F);
		            	}
					
					// Float
				
						if(this.Votes45A == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45A);
		            	}
					
					// Float
				
						if(this.Votes45AM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AM);
		            	}
					
					// Float
				
						if(this.Votes45AF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AF);
		            	}
					
					// Float
				
						if(this.VotesIMDB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesIMDB);
		            	}
					
					// Float
				
						if(this.Votes1000 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1000);
		            	}
					
					// Float
				
						if(this.VotesnUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesnUS);
		            	}
					
					// Integer
				
						writeInteger(this.TotalVotes,dos);
					
					// String
				
						writeString(this.Budget,dos);
					
					// String
				
						writeString(this.Domestic,dos);
					
					// String
				
						writeString(this.Foreign,dos);
					
					// Float
				
						if(this.VotesUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesUS);
		            	}
					
					// String
				
						writeString(this.Worldwide,dos);
					
					// Float
				
						if(this.Rating == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Rating);
		            	}
					
					// String
				
						writeString(this.Genre1,dos);
					
					// String
				
						writeString(this.Genre2,dos);
					
					// String
				
						writeString(this.Genre3,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("X="+String.valueOf(X));
		sb.append(",Title="+Title);
		sb.append(",MetaCritic="+MetaCritic);
		sb.append(",Runtime="+Runtime);
		sb.append(",CVotes10="+String.valueOf(CVotes10));
		sb.append(",CVotes09="+String.valueOf(CVotes09));
		sb.append(",CVotes08="+String.valueOf(CVotes08));
		sb.append(",CVotes07="+String.valueOf(CVotes07));
		sb.append(",CVotes06="+String.valueOf(CVotes06));
		sb.append(",CVotes05="+String.valueOf(CVotes05));
		sb.append(",CVotes04="+String.valueOf(CVotes04));
		sb.append(",CVotes03="+String.valueOf(CVotes03));
		sb.append(",CVotes02="+String.valueOf(CVotes02));
		sb.append(",CVotes01="+String.valueOf(CVotes01));
		sb.append(",CVotesMale="+String.valueOf(CVotesMale));
		sb.append(",CVotesFemale="+String.valueOf(CVotesFemale));
		sb.append(",CVotesU18="+String.valueOf(CVotesU18));
		sb.append(",CVotesU18M="+String.valueOf(CVotesU18M));
		sb.append(",CVotesU18F="+String.valueOf(CVotesU18F));
		sb.append(",CVotes1829="+String.valueOf(CVotes1829));
		sb.append(",CVotes1829M="+String.valueOf(CVotes1829M));
		sb.append(",CVotes1829F="+String.valueOf(CVotes1829F));
		sb.append(",CVotes3044="+String.valueOf(CVotes3044));
		sb.append(",CVotes3044M="+String.valueOf(CVotes3044M));
		sb.append(",CVotes3044F="+String.valueOf(CVotes3044F));
		sb.append(",CVotes45A="+String.valueOf(CVotes45A));
		sb.append(",CVotes45AM="+String.valueOf(CVotes45AM));
		sb.append(",CVotes45AF="+String.valueOf(CVotes45AF));
		sb.append(",CVotes1000="+String.valueOf(CVotes1000));
		sb.append(",CVotesUS="+String.valueOf(CVotesUS));
		sb.append(",CVotesnUS="+String.valueOf(CVotesnUS));
		sb.append(",VotesM="+String.valueOf(VotesM));
		sb.append(",VotesF="+String.valueOf(VotesF));
		sb.append(",VotesU18="+String.valueOf(VotesU18));
		sb.append(",VotesU18M="+String.valueOf(VotesU18M));
		sb.append(",VotesU18F="+String.valueOf(VotesU18F));
		sb.append(",Votes1829="+String.valueOf(Votes1829));
		sb.append(",Votes1829M="+String.valueOf(Votes1829M));
		sb.append(",Votes1829F="+String.valueOf(Votes1829F));
		sb.append(",Votes3044="+String.valueOf(Votes3044));
		sb.append(",Votes3044M="+String.valueOf(Votes3044M));
		sb.append(",Votes3044F="+String.valueOf(Votes3044F));
		sb.append(",Votes45A="+String.valueOf(Votes45A));
		sb.append(",Votes45AM="+String.valueOf(Votes45AM));
		sb.append(",Votes45AF="+String.valueOf(Votes45AF));
		sb.append(",VotesIMDB="+String.valueOf(VotesIMDB));
		sb.append(",Votes1000="+String.valueOf(Votes1000));
		sb.append(",VotesnUS="+String.valueOf(VotesnUS));
		sb.append(",TotalVotes="+String.valueOf(TotalVotes));
		sb.append(",Budget="+Budget);
		sb.append(",Domestic="+Domestic);
		sb.append(",Foreign="+Foreign);
		sb.append(",VotesUS="+String.valueOf(VotesUS));
		sb.append(",Worldwide="+Worldwide);
		sb.append(",Rating="+String.valueOf(Rating));
		sb.append(",Genre1="+Genre1);
		sb.append(",Genre2="+Genre2);
		sb.append(",Genre3="+Genre3);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_TAL1_imdb = new byte[0];
    static byte[] commonByteArray_TAL1_imdb = new byte[0];

	
			    public Integer X;

				public Integer getX () {
					return this.X;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String MetaCritic;

				public String getMetaCritic () {
					return this.MetaCritic;
				}
				
			    public String Runtime;

				public String getRuntime () {
					return this.Runtime;
				}
				
			    public Integer CVotes10;

				public Integer getCVotes10 () {
					return this.CVotes10;
				}
				
			    public Integer CVotes09;

				public Integer getCVotes09 () {
					return this.CVotes09;
				}
				
			    public Integer CVotes08;

				public Integer getCVotes08 () {
					return this.CVotes08;
				}
				
			    public Integer CVotes07;

				public Integer getCVotes07 () {
					return this.CVotes07;
				}
				
			    public Integer CVotes06;

				public Integer getCVotes06 () {
					return this.CVotes06;
				}
				
			    public Integer CVotes05;

				public Integer getCVotes05 () {
					return this.CVotes05;
				}
				
			    public Integer CVotes04;

				public Integer getCVotes04 () {
					return this.CVotes04;
				}
				
			    public Integer CVotes03;

				public Integer getCVotes03 () {
					return this.CVotes03;
				}
				
			    public Integer CVotes02;

				public Integer getCVotes02 () {
					return this.CVotes02;
				}
				
			    public Integer CVotes01;

				public Integer getCVotes01 () {
					return this.CVotes01;
				}
				
			    public Integer CVotesMale;

				public Integer getCVotesMale () {
					return this.CVotesMale;
				}
				
			    public Integer CVotesFemale;

				public Integer getCVotesFemale () {
					return this.CVotesFemale;
				}
				
			    public Integer CVotesU18;

				public Integer getCVotesU18 () {
					return this.CVotesU18;
				}
				
			    public Integer CVotesU18M;

				public Integer getCVotesU18M () {
					return this.CVotesU18M;
				}
				
			    public Integer CVotesU18F;

				public Integer getCVotesU18F () {
					return this.CVotesU18F;
				}
				
			    public Integer CVotes1829;

				public Integer getCVotes1829 () {
					return this.CVotes1829;
				}
				
			    public Integer CVotes1829M;

				public Integer getCVotes1829M () {
					return this.CVotes1829M;
				}
				
			    public Integer CVotes1829F;

				public Integer getCVotes1829F () {
					return this.CVotes1829F;
				}
				
			    public Integer CVotes3044;

				public Integer getCVotes3044 () {
					return this.CVotes3044;
				}
				
			    public Integer CVotes3044M;

				public Integer getCVotes3044M () {
					return this.CVotes3044M;
				}
				
			    public Integer CVotes3044F;

				public Integer getCVotes3044F () {
					return this.CVotes3044F;
				}
				
			    public Integer CVotes45A;

				public Integer getCVotes45A () {
					return this.CVotes45A;
				}
				
			    public Integer CVotes45AM;

				public Integer getCVotes45AM () {
					return this.CVotes45AM;
				}
				
			    public Integer CVotes45AF;

				public Integer getCVotes45AF () {
					return this.CVotes45AF;
				}
				
			    public Integer CVotes1000;

				public Integer getCVotes1000 () {
					return this.CVotes1000;
				}
				
			    public Integer CVotesUS;

				public Integer getCVotesUS () {
					return this.CVotesUS;
				}
				
			    public Integer CVotesnUS;

				public Integer getCVotesnUS () {
					return this.CVotesnUS;
				}
				
			    public Float VotesM;

				public Float getVotesM () {
					return this.VotesM;
				}
				
			    public Float VotesF;

				public Float getVotesF () {
					return this.VotesF;
				}
				
			    public Float VotesU18;

				public Float getVotesU18 () {
					return this.VotesU18;
				}
				
			    public Float VotesU18M;

				public Float getVotesU18M () {
					return this.VotesU18M;
				}
				
			    public Float VotesU18F;

				public Float getVotesU18F () {
					return this.VotesU18F;
				}
				
			    public Float Votes1829;

				public Float getVotes1829 () {
					return this.Votes1829;
				}
				
			    public Float Votes1829M;

				public Float getVotes1829M () {
					return this.Votes1829M;
				}
				
			    public Float Votes1829F;

				public Float getVotes1829F () {
					return this.Votes1829F;
				}
				
			    public Float Votes3044;

				public Float getVotes3044 () {
					return this.Votes3044;
				}
				
			    public Float Votes3044M;

				public Float getVotes3044M () {
					return this.Votes3044M;
				}
				
			    public Float Votes3044F;

				public Float getVotes3044F () {
					return this.Votes3044F;
				}
				
			    public Float Votes45A;

				public Float getVotes45A () {
					return this.Votes45A;
				}
				
			    public Float Votes45AM;

				public Float getVotes45AM () {
					return this.Votes45AM;
				}
				
			    public Float Votes45AF;

				public Float getVotes45AF () {
					return this.Votes45AF;
				}
				
			    public Float VotesIMDB;

				public Float getVotesIMDB () {
					return this.VotesIMDB;
				}
				
			    public Float Votes1000;

				public Float getVotes1000 () {
					return this.Votes1000;
				}
				
			    public Float VotesnUS;

				public Float getVotesnUS () {
					return this.VotesnUS;
				}
				
			    public Integer TotalVotes;

				public Integer getTotalVotes () {
					return this.TotalVotes;
				}
				
			    public String Budget;

				public String getBudget () {
					return this.Budget;
				}
				
			    public String Domestic;

				public String getDomestic () {
					return this.Domestic;
				}
				
			    public String Foreign;

				public String getForeign () {
					return this.Foreign;
				}
				
			    public Float VotesUS;

				public Float getVotesUS () {
					return this.VotesUS;
				}
				
			    public String Worldwide;

				public String getWorldwide () {
					return this.Worldwide;
				}
				
			    public Float Rating;

				public Float getRating () {
					return this.Rating;
				}
				
			    public String Genre1;

				public String getGenre1 () {
					return this.Genre1;
				}
				
			    public String Genre2;

				public String getGenre2 () {
					return this.Genre2;
				}
				
			    public String Genre3;

				public String getGenre3 () {
					return this.Genre3;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TAL1_imdb.length) {
				if(length < 1024 && commonByteArray_TAL1_imdb.length == 0) {
   					commonByteArray_TAL1_imdb = new byte[1024];
				} else {
   					commonByteArray_TAL1_imdb = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TAL1_imdb, 0, length);
			strReturn = new String(commonByteArray_TAL1_imdb, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TAL1_imdb.length) {
				if(length < 1024 && commonByteArray_TAL1_imdb.length == 0) {
   					commonByteArray_TAL1_imdb = new byte[1024];
				} else {
   					commonByteArray_TAL1_imdb = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_TAL1_imdb, 0, length);
			strReturn = new String(commonByteArray_TAL1_imdb, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
					this.Title = readString(dis);
					
					this.MetaCritic = readString(dis);
					
					this.Runtime = readString(dis);
					
						this.CVotes10 = readInteger(dis);
					
						this.CVotes09 = readInteger(dis);
					
						this.CVotes08 = readInteger(dis);
					
						this.CVotes07 = readInteger(dis);
					
						this.CVotes06 = readInteger(dis);
					
						this.CVotes05 = readInteger(dis);
					
						this.CVotes04 = readInteger(dis);
					
						this.CVotes03 = readInteger(dis);
					
						this.CVotes02 = readInteger(dis);
					
						this.CVotes01 = readInteger(dis);
					
						this.CVotesMale = readInteger(dis);
					
						this.CVotesFemale = readInteger(dis);
					
						this.CVotesU18 = readInteger(dis);
					
						this.CVotesU18M = readInteger(dis);
					
						this.CVotesU18F = readInteger(dis);
					
						this.CVotes1829 = readInteger(dis);
					
						this.CVotes1829M = readInteger(dis);
					
						this.CVotes1829F = readInteger(dis);
					
						this.CVotes3044 = readInteger(dis);
					
						this.CVotes3044M = readInteger(dis);
					
						this.CVotes3044F = readInteger(dis);
					
						this.CVotes45A = readInteger(dis);
					
						this.CVotes45AM = readInteger(dis);
					
						this.CVotes45AF = readInteger(dis);
					
						this.CVotes1000 = readInteger(dis);
					
						this.CVotesUS = readInteger(dis);
					
						this.CVotesnUS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesM = null;
           				} else {
           			    	this.VotesM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesF = null;
           				} else {
           			    	this.VotesF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18 = null;
           				} else {
           			    	this.VotesU18 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18M = null;
           				} else {
           			    	this.VotesU18M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18F = null;
           				} else {
           			    	this.VotesU18F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829 = null;
           				} else {
           			    	this.Votes1829 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829M = null;
           				} else {
           			    	this.Votes1829M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829F = null;
           				} else {
           			    	this.Votes1829F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044 = null;
           				} else {
           			    	this.Votes3044 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044M = null;
           				} else {
           			    	this.Votes3044M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044F = null;
           				} else {
           			    	this.Votes3044F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45A = null;
           				} else {
           			    	this.Votes45A = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AM = null;
           				} else {
           			    	this.Votes45AM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AF = null;
           				} else {
           			    	this.Votes45AF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesIMDB = null;
           				} else {
           			    	this.VotesIMDB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1000 = null;
           				} else {
           			    	this.Votes1000 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesnUS = null;
           				} else {
           			    	this.VotesnUS = dis.readFloat();
           				}
					
						this.TotalVotes = readInteger(dis);
					
					this.Budget = readString(dis);
					
					this.Domestic = readString(dis);
					
					this.Foreign = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesUS = null;
           				} else {
           			    	this.VotesUS = dis.readFloat();
           				}
					
					this.Worldwide = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Rating = null;
           				} else {
           			    	this.Rating = dis.readFloat();
           				}
					
					this.Genre1 = readString(dis);
					
					this.Genre2 = readString(dis);
					
					this.Genre3 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
					this.Title = readString(dis);
					
					this.MetaCritic = readString(dis);
					
					this.Runtime = readString(dis);
					
						this.CVotes10 = readInteger(dis);
					
						this.CVotes09 = readInteger(dis);
					
						this.CVotes08 = readInteger(dis);
					
						this.CVotes07 = readInteger(dis);
					
						this.CVotes06 = readInteger(dis);
					
						this.CVotes05 = readInteger(dis);
					
						this.CVotes04 = readInteger(dis);
					
						this.CVotes03 = readInteger(dis);
					
						this.CVotes02 = readInteger(dis);
					
						this.CVotes01 = readInteger(dis);
					
						this.CVotesMale = readInteger(dis);
					
						this.CVotesFemale = readInteger(dis);
					
						this.CVotesU18 = readInteger(dis);
					
						this.CVotesU18M = readInteger(dis);
					
						this.CVotesU18F = readInteger(dis);
					
						this.CVotes1829 = readInteger(dis);
					
						this.CVotes1829M = readInteger(dis);
					
						this.CVotes1829F = readInteger(dis);
					
						this.CVotes3044 = readInteger(dis);
					
						this.CVotes3044M = readInteger(dis);
					
						this.CVotes3044F = readInteger(dis);
					
						this.CVotes45A = readInteger(dis);
					
						this.CVotes45AM = readInteger(dis);
					
						this.CVotes45AF = readInteger(dis);
					
						this.CVotes1000 = readInteger(dis);
					
						this.CVotesUS = readInteger(dis);
					
						this.CVotesnUS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesM = null;
           				} else {
           			    	this.VotesM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesF = null;
           				} else {
           			    	this.VotesF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18 = null;
           				} else {
           			    	this.VotesU18 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18M = null;
           				} else {
           			    	this.VotesU18M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18F = null;
           				} else {
           			    	this.VotesU18F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829 = null;
           				} else {
           			    	this.Votes1829 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829M = null;
           				} else {
           			    	this.Votes1829M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829F = null;
           				} else {
           			    	this.Votes1829F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044 = null;
           				} else {
           			    	this.Votes3044 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044M = null;
           				} else {
           			    	this.Votes3044M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044F = null;
           				} else {
           			    	this.Votes3044F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45A = null;
           				} else {
           			    	this.Votes45A = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AM = null;
           				} else {
           			    	this.Votes45AM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AF = null;
           				} else {
           			    	this.Votes45AF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesIMDB = null;
           				} else {
           			    	this.VotesIMDB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1000 = null;
           				} else {
           			    	this.Votes1000 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesnUS = null;
           				} else {
           			    	this.VotesnUS = dis.readFloat();
           				}
					
						this.TotalVotes = readInteger(dis);
					
					this.Budget = readString(dis);
					
					this.Domestic = readString(dis);
					
					this.Foreign = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesUS = null;
           				} else {
           			    	this.VotesUS = dis.readFloat();
           				}
					
					this.Worldwide = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Rating = null;
           				} else {
           			    	this.Rating = dis.readFloat();
           				}
					
					this.Genre1 = readString(dis);
					
					this.Genre2 = readString(dis);
					
					this.Genre3 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MetaCritic,dos);
					
					// String
				
						writeString(this.Runtime,dos);
					
					// Integer
				
						writeInteger(this.CVotes10,dos);
					
					// Integer
				
						writeInteger(this.CVotes09,dos);
					
					// Integer
				
						writeInteger(this.CVotes08,dos);
					
					// Integer
				
						writeInteger(this.CVotes07,dos);
					
					// Integer
				
						writeInteger(this.CVotes06,dos);
					
					// Integer
				
						writeInteger(this.CVotes05,dos);
					
					// Integer
				
						writeInteger(this.CVotes04,dos);
					
					// Integer
				
						writeInteger(this.CVotes03,dos);
					
					// Integer
				
						writeInteger(this.CVotes02,dos);
					
					// Integer
				
						writeInteger(this.CVotes01,dos);
					
					// Integer
				
						writeInteger(this.CVotesMale,dos);
					
					// Integer
				
						writeInteger(this.CVotesFemale,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18M,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18F,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829M,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829F,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044M,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044F,dos);
					
					// Integer
				
						writeInteger(this.CVotes45A,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AM,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AF,dos);
					
					// Integer
				
						writeInteger(this.CVotes1000,dos);
					
					// Integer
				
						writeInteger(this.CVotesUS,dos);
					
					// Integer
				
						writeInteger(this.CVotesnUS,dos);
					
					// Float
				
						if(this.VotesM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesM);
		            	}
					
					// Float
				
						if(this.VotesF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesF);
		            	}
					
					// Float
				
						if(this.VotesU18 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18);
		            	}
					
					// Float
				
						if(this.VotesU18M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18M);
		            	}
					
					// Float
				
						if(this.VotesU18F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18F);
		            	}
					
					// Float
				
						if(this.Votes1829 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829);
		            	}
					
					// Float
				
						if(this.Votes1829M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829M);
		            	}
					
					// Float
				
						if(this.Votes1829F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829F);
		            	}
					
					// Float
				
						if(this.Votes3044 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044);
		            	}
					
					// Float
				
						if(this.Votes3044M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044M);
		            	}
					
					// Float
				
						if(this.Votes3044F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044F);
		            	}
					
					// Float
				
						if(this.Votes45A == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45A);
		            	}
					
					// Float
				
						if(this.Votes45AM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AM);
		            	}
					
					// Float
				
						if(this.Votes45AF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AF);
		            	}
					
					// Float
				
						if(this.VotesIMDB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesIMDB);
		            	}
					
					// Float
				
						if(this.Votes1000 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1000);
		            	}
					
					// Float
				
						if(this.VotesnUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesnUS);
		            	}
					
					// Integer
				
						writeInteger(this.TotalVotes,dos);
					
					// String
				
						writeString(this.Budget,dos);
					
					// String
				
						writeString(this.Domestic,dos);
					
					// String
				
						writeString(this.Foreign,dos);
					
					// Float
				
						if(this.VotesUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesUS);
		            	}
					
					// String
				
						writeString(this.Worldwide,dos);
					
					// Float
				
						if(this.Rating == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Rating);
		            	}
					
					// String
				
						writeString(this.Genre1,dos);
					
					// String
				
						writeString(this.Genre2,dos);
					
					// String
				
						writeString(this.Genre3,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MetaCritic,dos);
					
					// String
				
						writeString(this.Runtime,dos);
					
					// Integer
				
						writeInteger(this.CVotes10,dos);
					
					// Integer
				
						writeInteger(this.CVotes09,dos);
					
					// Integer
				
						writeInteger(this.CVotes08,dos);
					
					// Integer
				
						writeInteger(this.CVotes07,dos);
					
					// Integer
				
						writeInteger(this.CVotes06,dos);
					
					// Integer
				
						writeInteger(this.CVotes05,dos);
					
					// Integer
				
						writeInteger(this.CVotes04,dos);
					
					// Integer
				
						writeInteger(this.CVotes03,dos);
					
					// Integer
				
						writeInteger(this.CVotes02,dos);
					
					// Integer
				
						writeInteger(this.CVotes01,dos);
					
					// Integer
				
						writeInteger(this.CVotesMale,dos);
					
					// Integer
				
						writeInteger(this.CVotesFemale,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18M,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18F,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829M,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829F,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044M,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044F,dos);
					
					// Integer
				
						writeInteger(this.CVotes45A,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AM,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AF,dos);
					
					// Integer
				
						writeInteger(this.CVotes1000,dos);
					
					// Integer
				
						writeInteger(this.CVotesUS,dos);
					
					// Integer
				
						writeInteger(this.CVotesnUS,dos);
					
					// Float
				
						if(this.VotesM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesM);
		            	}
					
					// Float
				
						if(this.VotesF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesF);
		            	}
					
					// Float
				
						if(this.VotesU18 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18);
		            	}
					
					// Float
				
						if(this.VotesU18M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18M);
		            	}
					
					// Float
				
						if(this.VotesU18F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18F);
		            	}
					
					// Float
				
						if(this.Votes1829 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829);
		            	}
					
					// Float
				
						if(this.Votes1829M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829M);
		            	}
					
					// Float
				
						if(this.Votes1829F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829F);
		            	}
					
					// Float
				
						if(this.Votes3044 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044);
		            	}
					
					// Float
				
						if(this.Votes3044M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044M);
		            	}
					
					// Float
				
						if(this.Votes3044F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044F);
		            	}
					
					// Float
				
						if(this.Votes45A == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45A);
		            	}
					
					// Float
				
						if(this.Votes45AM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AM);
		            	}
					
					// Float
				
						if(this.Votes45AF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AF);
		            	}
					
					// Float
				
						if(this.VotesIMDB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesIMDB);
		            	}
					
					// Float
				
						if(this.Votes1000 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1000);
		            	}
					
					// Float
				
						if(this.VotesnUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesnUS);
		            	}
					
					// Integer
				
						writeInteger(this.TotalVotes,dos);
					
					// String
				
						writeString(this.Budget,dos);
					
					// String
				
						writeString(this.Domestic,dos);
					
					// String
				
						writeString(this.Foreign,dos);
					
					// Float
				
						if(this.VotesUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesUS);
		            	}
					
					// String
				
						writeString(this.Worldwide,dos);
					
					// Float
				
						if(this.Rating == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Rating);
		            	}
					
					// String
				
						writeString(this.Genre1,dos);
					
					// String
				
						writeString(this.Genre2,dos);
					
					// String
				
						writeString(this.Genre3,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("X="+String.valueOf(X));
		sb.append(",Title="+Title);
		sb.append(",MetaCritic="+MetaCritic);
		sb.append(",Runtime="+Runtime);
		sb.append(",CVotes10="+String.valueOf(CVotes10));
		sb.append(",CVotes09="+String.valueOf(CVotes09));
		sb.append(",CVotes08="+String.valueOf(CVotes08));
		sb.append(",CVotes07="+String.valueOf(CVotes07));
		sb.append(",CVotes06="+String.valueOf(CVotes06));
		sb.append(",CVotes05="+String.valueOf(CVotes05));
		sb.append(",CVotes04="+String.valueOf(CVotes04));
		sb.append(",CVotes03="+String.valueOf(CVotes03));
		sb.append(",CVotes02="+String.valueOf(CVotes02));
		sb.append(",CVotes01="+String.valueOf(CVotes01));
		sb.append(",CVotesMale="+String.valueOf(CVotesMale));
		sb.append(",CVotesFemale="+String.valueOf(CVotesFemale));
		sb.append(",CVotesU18="+String.valueOf(CVotesU18));
		sb.append(",CVotesU18M="+String.valueOf(CVotesU18M));
		sb.append(",CVotesU18F="+String.valueOf(CVotesU18F));
		sb.append(",CVotes1829="+String.valueOf(CVotes1829));
		sb.append(",CVotes1829M="+String.valueOf(CVotes1829M));
		sb.append(",CVotes1829F="+String.valueOf(CVotes1829F));
		sb.append(",CVotes3044="+String.valueOf(CVotes3044));
		sb.append(",CVotes3044M="+String.valueOf(CVotes3044M));
		sb.append(",CVotes3044F="+String.valueOf(CVotes3044F));
		sb.append(",CVotes45A="+String.valueOf(CVotes45A));
		sb.append(",CVotes45AM="+String.valueOf(CVotes45AM));
		sb.append(",CVotes45AF="+String.valueOf(CVotes45AF));
		sb.append(",CVotes1000="+String.valueOf(CVotes1000));
		sb.append(",CVotesUS="+String.valueOf(CVotesUS));
		sb.append(",CVotesnUS="+String.valueOf(CVotesnUS));
		sb.append(",VotesM="+String.valueOf(VotesM));
		sb.append(",VotesF="+String.valueOf(VotesF));
		sb.append(",VotesU18="+String.valueOf(VotesU18));
		sb.append(",VotesU18M="+String.valueOf(VotesU18M));
		sb.append(",VotesU18F="+String.valueOf(VotesU18F));
		sb.append(",Votes1829="+String.valueOf(Votes1829));
		sb.append(",Votes1829M="+String.valueOf(Votes1829M));
		sb.append(",Votes1829F="+String.valueOf(Votes1829F));
		sb.append(",Votes3044="+String.valueOf(Votes3044));
		sb.append(",Votes3044M="+String.valueOf(Votes3044M));
		sb.append(",Votes3044F="+String.valueOf(Votes3044F));
		sb.append(",Votes45A="+String.valueOf(Votes45A));
		sb.append(",Votes45AM="+String.valueOf(Votes45AM));
		sb.append(",Votes45AF="+String.valueOf(Votes45AF));
		sb.append(",VotesIMDB="+String.valueOf(VotesIMDB));
		sb.append(",Votes1000="+String.valueOf(Votes1000));
		sb.append(",VotesnUS="+String.valueOf(VotesnUS));
		sb.append(",TotalVotes="+String.valueOf(TotalVotes));
		sb.append(",Budget="+Budget);
		sb.append(",Domestic="+Domestic);
		sb.append(",Foreign="+Foreign);
		sb.append(",VotesUS="+String.valueOf(VotesUS));
		sb.append(",Worldwide="+Worldwide);
		sb.append(",Rating="+String.valueOf(Rating));
		sb.append(",Genre1="+Genre1);
		sb.append(",Genre2="+Genre2);
		sb.append(",Genre3="+Genre3);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_TAL1_imdb = new byte[0];
    static byte[] commonByteArray_TAL1_imdb = new byte[0];

	
			    public Integer X;

				public Integer getX () {
					return this.X;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public Integer X_1;

				public Integer getX_1 () {
					return this.X_1;
				}
				
			    public String Title_1;

				public String getTitle_1 () {
					return this.Title_1;
				}
				
			    public Integer X_2;

				public Integer getX_2 () {
					return this.X_2;
				}
				
			    public String Title_2;

				public String getTitle_2 () {
					return this.Title_2;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TAL1_imdb.length) {
				if(length < 1024 && commonByteArray_TAL1_imdb.length == 0) {
   					commonByteArray_TAL1_imdb = new byte[1024];
				} else {
   					commonByteArray_TAL1_imdb = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TAL1_imdb, 0, length);
			strReturn = new String(commonByteArray_TAL1_imdb, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TAL1_imdb.length) {
				if(length < 1024 && commonByteArray_TAL1_imdb.length == 0) {
   					commonByteArray_TAL1_imdb = new byte[1024];
				} else {
   					commonByteArray_TAL1_imdb = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_TAL1_imdb, 0, length);
			strReturn = new String(commonByteArray_TAL1_imdb, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
					this.Title = readString(dis);
					
						this.X_1 = readInteger(dis);
					
					this.Title_1 = readString(dis);
					
						this.X_2 = readInteger(dis);
					
					this.Title_2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
					this.Title = readString(dis);
					
						this.X_1 = readInteger(dis);
					
					this.Title_1 = readString(dis);
					
						this.X_2 = readInteger(dis);
					
					this.Title_2 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// Integer
				
						writeInteger(this.X_1,dos);
					
					// String
				
						writeString(this.Title_1,dos);
					
					// Integer
				
						writeInteger(this.X_2,dos);
					
					// String
				
						writeString(this.Title_2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// Integer
				
						writeInteger(this.X_1,dos);
					
					// String
				
						writeString(this.Title_1,dos);
					
					// Integer
				
						writeInteger(this.X_2,dos);
					
					// String
				
						writeString(this.Title_2,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("X="+String.valueOf(X));
		sb.append(",Title="+Title);
		sb.append(",X_1="+String.valueOf(X_1));
		sb.append(",Title_1="+Title_1);
		sb.append(",X_2="+String.valueOf(X_2));
		sb.append(",Title_2="+Title_2);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_TAL1_imdb = new byte[0];
    static byte[] commonByteArray_TAL1_imdb = new byte[0];

	
			    public Integer X;

				public Integer getX () {
					return this.X;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String MetaCritic;

				public String getMetaCritic () {
					return this.MetaCritic;
				}
				
			    public String Runtime;

				public String getRuntime () {
					return this.Runtime;
				}
				
			    public Integer CVotes10;

				public Integer getCVotes10 () {
					return this.CVotes10;
				}
				
			    public Integer CVotes09;

				public Integer getCVotes09 () {
					return this.CVotes09;
				}
				
			    public Integer CVotes08;

				public Integer getCVotes08 () {
					return this.CVotes08;
				}
				
			    public Integer CVotes07;

				public Integer getCVotes07 () {
					return this.CVotes07;
				}
				
			    public Integer CVotes06;

				public Integer getCVotes06 () {
					return this.CVotes06;
				}
				
			    public Integer CVotes05;

				public Integer getCVotes05 () {
					return this.CVotes05;
				}
				
			    public Integer CVotes04;

				public Integer getCVotes04 () {
					return this.CVotes04;
				}
				
			    public Integer CVotes03;

				public Integer getCVotes03 () {
					return this.CVotes03;
				}
				
			    public Integer CVotes02;

				public Integer getCVotes02 () {
					return this.CVotes02;
				}
				
			    public Integer CVotes01;

				public Integer getCVotes01 () {
					return this.CVotes01;
				}
				
			    public Integer CVotesMale;

				public Integer getCVotesMale () {
					return this.CVotesMale;
				}
				
			    public Integer CVotesFemale;

				public Integer getCVotesFemale () {
					return this.CVotesFemale;
				}
				
			    public Integer CVotesU18;

				public Integer getCVotesU18 () {
					return this.CVotesU18;
				}
				
			    public Integer CVotesU18M;

				public Integer getCVotesU18M () {
					return this.CVotesU18M;
				}
				
			    public Integer CVotesU18F;

				public Integer getCVotesU18F () {
					return this.CVotesU18F;
				}
				
			    public Integer CVotes1829;

				public Integer getCVotes1829 () {
					return this.CVotes1829;
				}
				
			    public Integer CVotes1829M;

				public Integer getCVotes1829M () {
					return this.CVotes1829M;
				}
				
			    public Integer CVotes1829F;

				public Integer getCVotes1829F () {
					return this.CVotes1829F;
				}
				
			    public Integer CVotes3044;

				public Integer getCVotes3044 () {
					return this.CVotes3044;
				}
				
			    public Integer CVotes3044M;

				public Integer getCVotes3044M () {
					return this.CVotes3044M;
				}
				
			    public Integer CVotes3044F;

				public Integer getCVotes3044F () {
					return this.CVotes3044F;
				}
				
			    public Integer CVotes45A;

				public Integer getCVotes45A () {
					return this.CVotes45A;
				}
				
			    public Integer CVotes45AM;

				public Integer getCVotes45AM () {
					return this.CVotes45AM;
				}
				
			    public Integer CVotes45AF;

				public Integer getCVotes45AF () {
					return this.CVotes45AF;
				}
				
			    public Integer CVotes1000;

				public Integer getCVotes1000 () {
					return this.CVotes1000;
				}
				
			    public Integer CVotesUS;

				public Integer getCVotesUS () {
					return this.CVotesUS;
				}
				
			    public Integer CVotesnUS;

				public Integer getCVotesnUS () {
					return this.CVotesnUS;
				}
				
			    public Float VotesM;

				public Float getVotesM () {
					return this.VotesM;
				}
				
			    public Float VotesF;

				public Float getVotesF () {
					return this.VotesF;
				}
				
			    public Float VotesU18;

				public Float getVotesU18 () {
					return this.VotesU18;
				}
				
			    public Float VotesU18M;

				public Float getVotesU18M () {
					return this.VotesU18M;
				}
				
			    public Float VotesU18F;

				public Float getVotesU18F () {
					return this.VotesU18F;
				}
				
			    public Float Votes1829;

				public Float getVotes1829 () {
					return this.Votes1829;
				}
				
			    public Float Votes1829M;

				public Float getVotes1829M () {
					return this.Votes1829M;
				}
				
			    public Float Votes1829F;

				public Float getVotes1829F () {
					return this.Votes1829F;
				}
				
			    public Float Votes3044;

				public Float getVotes3044 () {
					return this.Votes3044;
				}
				
			    public Float Votes3044M;

				public Float getVotes3044M () {
					return this.Votes3044M;
				}
				
			    public Float Votes3044F;

				public Float getVotes3044F () {
					return this.Votes3044F;
				}
				
			    public Float Votes45A;

				public Float getVotes45A () {
					return this.Votes45A;
				}
				
			    public Float Votes45AM;

				public Float getVotes45AM () {
					return this.Votes45AM;
				}
				
			    public Float Votes45AF;

				public Float getVotes45AF () {
					return this.Votes45AF;
				}
				
			    public Float VotesIMDB;

				public Float getVotesIMDB () {
					return this.VotesIMDB;
				}
				
			    public Float Votes1000;

				public Float getVotes1000 () {
					return this.Votes1000;
				}
				
			    public Float VotesUS;

				public Float getVotesUS () {
					return this.VotesUS;
				}
				
			    public Float VotesnUS;

				public Float getVotesnUS () {
					return this.VotesnUS;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TAL1_imdb.length) {
				if(length < 1024 && commonByteArray_TAL1_imdb.length == 0) {
   					commonByteArray_TAL1_imdb = new byte[1024];
				} else {
   					commonByteArray_TAL1_imdb = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TAL1_imdb, 0, length);
			strReturn = new String(commonByteArray_TAL1_imdb, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TAL1_imdb.length) {
				if(length < 1024 && commonByteArray_TAL1_imdb.length == 0) {
   					commonByteArray_TAL1_imdb = new byte[1024];
				} else {
   					commonByteArray_TAL1_imdb = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_TAL1_imdb, 0, length);
			strReturn = new String(commonByteArray_TAL1_imdb, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
					this.Title = readString(dis);
					
					this.MetaCritic = readString(dis);
					
					this.Runtime = readString(dis);
					
						this.CVotes10 = readInteger(dis);
					
						this.CVotes09 = readInteger(dis);
					
						this.CVotes08 = readInteger(dis);
					
						this.CVotes07 = readInteger(dis);
					
						this.CVotes06 = readInteger(dis);
					
						this.CVotes05 = readInteger(dis);
					
						this.CVotes04 = readInteger(dis);
					
						this.CVotes03 = readInteger(dis);
					
						this.CVotes02 = readInteger(dis);
					
						this.CVotes01 = readInteger(dis);
					
						this.CVotesMale = readInteger(dis);
					
						this.CVotesFemale = readInteger(dis);
					
						this.CVotesU18 = readInteger(dis);
					
						this.CVotesU18M = readInteger(dis);
					
						this.CVotesU18F = readInteger(dis);
					
						this.CVotes1829 = readInteger(dis);
					
						this.CVotes1829M = readInteger(dis);
					
						this.CVotes1829F = readInteger(dis);
					
						this.CVotes3044 = readInteger(dis);
					
						this.CVotes3044M = readInteger(dis);
					
						this.CVotes3044F = readInteger(dis);
					
						this.CVotes45A = readInteger(dis);
					
						this.CVotes45AM = readInteger(dis);
					
						this.CVotes45AF = readInteger(dis);
					
						this.CVotes1000 = readInteger(dis);
					
						this.CVotesUS = readInteger(dis);
					
						this.CVotesnUS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesM = null;
           				} else {
           			    	this.VotesM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesF = null;
           				} else {
           			    	this.VotesF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18 = null;
           				} else {
           			    	this.VotesU18 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18M = null;
           				} else {
           			    	this.VotesU18M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18F = null;
           				} else {
           			    	this.VotesU18F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829 = null;
           				} else {
           			    	this.Votes1829 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829M = null;
           				} else {
           			    	this.Votes1829M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829F = null;
           				} else {
           			    	this.Votes1829F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044 = null;
           				} else {
           			    	this.Votes3044 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044M = null;
           				} else {
           			    	this.Votes3044M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044F = null;
           				} else {
           			    	this.Votes3044F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45A = null;
           				} else {
           			    	this.Votes45A = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AM = null;
           				} else {
           			    	this.Votes45AM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AF = null;
           				} else {
           			    	this.Votes45AF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesIMDB = null;
           				} else {
           			    	this.VotesIMDB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1000 = null;
           				} else {
           			    	this.Votes1000 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesUS = null;
           				} else {
           			    	this.VotesUS = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesnUS = null;
           				} else {
           			    	this.VotesnUS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
					this.Title = readString(dis);
					
					this.MetaCritic = readString(dis);
					
					this.Runtime = readString(dis);
					
						this.CVotes10 = readInteger(dis);
					
						this.CVotes09 = readInteger(dis);
					
						this.CVotes08 = readInteger(dis);
					
						this.CVotes07 = readInteger(dis);
					
						this.CVotes06 = readInteger(dis);
					
						this.CVotes05 = readInteger(dis);
					
						this.CVotes04 = readInteger(dis);
					
						this.CVotes03 = readInteger(dis);
					
						this.CVotes02 = readInteger(dis);
					
						this.CVotes01 = readInteger(dis);
					
						this.CVotesMale = readInteger(dis);
					
						this.CVotesFemale = readInteger(dis);
					
						this.CVotesU18 = readInteger(dis);
					
						this.CVotesU18M = readInteger(dis);
					
						this.CVotesU18F = readInteger(dis);
					
						this.CVotes1829 = readInteger(dis);
					
						this.CVotes1829M = readInteger(dis);
					
						this.CVotes1829F = readInteger(dis);
					
						this.CVotes3044 = readInteger(dis);
					
						this.CVotes3044M = readInteger(dis);
					
						this.CVotes3044F = readInteger(dis);
					
						this.CVotes45A = readInteger(dis);
					
						this.CVotes45AM = readInteger(dis);
					
						this.CVotes45AF = readInteger(dis);
					
						this.CVotes1000 = readInteger(dis);
					
						this.CVotesUS = readInteger(dis);
					
						this.CVotesnUS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesM = null;
           				} else {
           			    	this.VotesM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesF = null;
           				} else {
           			    	this.VotesF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18 = null;
           				} else {
           			    	this.VotesU18 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18M = null;
           				} else {
           			    	this.VotesU18M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18F = null;
           				} else {
           			    	this.VotesU18F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829 = null;
           				} else {
           			    	this.Votes1829 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829M = null;
           				} else {
           			    	this.Votes1829M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829F = null;
           				} else {
           			    	this.Votes1829F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044 = null;
           				} else {
           			    	this.Votes3044 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044M = null;
           				} else {
           			    	this.Votes3044M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044F = null;
           				} else {
           			    	this.Votes3044F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45A = null;
           				} else {
           			    	this.Votes45A = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AM = null;
           				} else {
           			    	this.Votes45AM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AF = null;
           				} else {
           			    	this.Votes45AF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesIMDB = null;
           				} else {
           			    	this.VotesIMDB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1000 = null;
           				} else {
           			    	this.Votes1000 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesUS = null;
           				} else {
           			    	this.VotesUS = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesnUS = null;
           				} else {
           			    	this.VotesnUS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MetaCritic,dos);
					
					// String
				
						writeString(this.Runtime,dos);
					
					// Integer
				
						writeInteger(this.CVotes10,dos);
					
					// Integer
				
						writeInteger(this.CVotes09,dos);
					
					// Integer
				
						writeInteger(this.CVotes08,dos);
					
					// Integer
				
						writeInteger(this.CVotes07,dos);
					
					// Integer
				
						writeInteger(this.CVotes06,dos);
					
					// Integer
				
						writeInteger(this.CVotes05,dos);
					
					// Integer
				
						writeInteger(this.CVotes04,dos);
					
					// Integer
				
						writeInteger(this.CVotes03,dos);
					
					// Integer
				
						writeInteger(this.CVotes02,dos);
					
					// Integer
				
						writeInteger(this.CVotes01,dos);
					
					// Integer
				
						writeInteger(this.CVotesMale,dos);
					
					// Integer
				
						writeInteger(this.CVotesFemale,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18M,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18F,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829M,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829F,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044M,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044F,dos);
					
					// Integer
				
						writeInteger(this.CVotes45A,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AM,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AF,dos);
					
					// Integer
				
						writeInteger(this.CVotes1000,dos);
					
					// Integer
				
						writeInteger(this.CVotesUS,dos);
					
					// Integer
				
						writeInteger(this.CVotesnUS,dos);
					
					// Float
				
						if(this.VotesM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesM);
		            	}
					
					// Float
				
						if(this.VotesF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesF);
		            	}
					
					// Float
				
						if(this.VotesU18 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18);
		            	}
					
					// Float
				
						if(this.VotesU18M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18M);
		            	}
					
					// Float
				
						if(this.VotesU18F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18F);
		            	}
					
					// Float
				
						if(this.Votes1829 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829);
		            	}
					
					// Float
				
						if(this.Votes1829M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829M);
		            	}
					
					// Float
				
						if(this.Votes1829F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829F);
		            	}
					
					// Float
				
						if(this.Votes3044 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044);
		            	}
					
					// Float
				
						if(this.Votes3044M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044M);
		            	}
					
					// Float
				
						if(this.Votes3044F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044F);
		            	}
					
					// Float
				
						if(this.Votes45A == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45A);
		            	}
					
					// Float
				
						if(this.Votes45AM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AM);
		            	}
					
					// Float
				
						if(this.Votes45AF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AF);
		            	}
					
					// Float
				
						if(this.VotesIMDB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesIMDB);
		            	}
					
					// Float
				
						if(this.Votes1000 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1000);
		            	}
					
					// Float
				
						if(this.VotesUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesUS);
		            	}
					
					// Float
				
						if(this.VotesnUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesnUS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MetaCritic,dos);
					
					// String
				
						writeString(this.Runtime,dos);
					
					// Integer
				
						writeInteger(this.CVotes10,dos);
					
					// Integer
				
						writeInteger(this.CVotes09,dos);
					
					// Integer
				
						writeInteger(this.CVotes08,dos);
					
					// Integer
				
						writeInteger(this.CVotes07,dos);
					
					// Integer
				
						writeInteger(this.CVotes06,dos);
					
					// Integer
				
						writeInteger(this.CVotes05,dos);
					
					// Integer
				
						writeInteger(this.CVotes04,dos);
					
					// Integer
				
						writeInteger(this.CVotes03,dos);
					
					// Integer
				
						writeInteger(this.CVotes02,dos);
					
					// Integer
				
						writeInteger(this.CVotes01,dos);
					
					// Integer
				
						writeInteger(this.CVotesMale,dos);
					
					// Integer
				
						writeInteger(this.CVotesFemale,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18M,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18F,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829M,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829F,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044M,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044F,dos);
					
					// Integer
				
						writeInteger(this.CVotes45A,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AM,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AF,dos);
					
					// Integer
				
						writeInteger(this.CVotes1000,dos);
					
					// Integer
				
						writeInteger(this.CVotesUS,dos);
					
					// Integer
				
						writeInteger(this.CVotesnUS,dos);
					
					// Float
				
						if(this.VotesM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesM);
		            	}
					
					// Float
				
						if(this.VotesF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesF);
		            	}
					
					// Float
				
						if(this.VotesU18 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18);
		            	}
					
					// Float
				
						if(this.VotesU18M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18M);
		            	}
					
					// Float
				
						if(this.VotesU18F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18F);
		            	}
					
					// Float
				
						if(this.Votes1829 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829);
		            	}
					
					// Float
				
						if(this.Votes1829M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829M);
		            	}
					
					// Float
				
						if(this.Votes1829F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829F);
		            	}
					
					// Float
				
						if(this.Votes3044 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044);
		            	}
					
					// Float
				
						if(this.Votes3044M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044M);
		            	}
					
					// Float
				
						if(this.Votes3044F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044F);
		            	}
					
					// Float
				
						if(this.Votes45A == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45A);
		            	}
					
					// Float
				
						if(this.Votes45AM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AM);
		            	}
					
					// Float
				
						if(this.Votes45AF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AF);
		            	}
					
					// Float
				
						if(this.VotesIMDB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesIMDB);
		            	}
					
					// Float
				
						if(this.Votes1000 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1000);
		            	}
					
					// Float
				
						if(this.VotesUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesUS);
		            	}
					
					// Float
				
						if(this.VotesnUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesnUS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("X="+String.valueOf(X));
		sb.append(",Title="+Title);
		sb.append(",MetaCritic="+MetaCritic);
		sb.append(",Runtime="+Runtime);
		sb.append(",CVotes10="+String.valueOf(CVotes10));
		sb.append(",CVotes09="+String.valueOf(CVotes09));
		sb.append(",CVotes08="+String.valueOf(CVotes08));
		sb.append(",CVotes07="+String.valueOf(CVotes07));
		sb.append(",CVotes06="+String.valueOf(CVotes06));
		sb.append(",CVotes05="+String.valueOf(CVotes05));
		sb.append(",CVotes04="+String.valueOf(CVotes04));
		sb.append(",CVotes03="+String.valueOf(CVotes03));
		sb.append(",CVotes02="+String.valueOf(CVotes02));
		sb.append(",CVotes01="+String.valueOf(CVotes01));
		sb.append(",CVotesMale="+String.valueOf(CVotesMale));
		sb.append(",CVotesFemale="+String.valueOf(CVotesFemale));
		sb.append(",CVotesU18="+String.valueOf(CVotesU18));
		sb.append(",CVotesU18M="+String.valueOf(CVotesU18M));
		sb.append(",CVotesU18F="+String.valueOf(CVotesU18F));
		sb.append(",CVotes1829="+String.valueOf(CVotes1829));
		sb.append(",CVotes1829M="+String.valueOf(CVotes1829M));
		sb.append(",CVotes1829F="+String.valueOf(CVotes1829F));
		sb.append(",CVotes3044="+String.valueOf(CVotes3044));
		sb.append(",CVotes3044M="+String.valueOf(CVotes3044M));
		sb.append(",CVotes3044F="+String.valueOf(CVotes3044F));
		sb.append(",CVotes45A="+String.valueOf(CVotes45A));
		sb.append(",CVotes45AM="+String.valueOf(CVotes45AM));
		sb.append(",CVotes45AF="+String.valueOf(CVotes45AF));
		sb.append(",CVotes1000="+String.valueOf(CVotes1000));
		sb.append(",CVotesUS="+String.valueOf(CVotesUS));
		sb.append(",CVotesnUS="+String.valueOf(CVotesnUS));
		sb.append(",VotesM="+String.valueOf(VotesM));
		sb.append(",VotesF="+String.valueOf(VotesF));
		sb.append(",VotesU18="+String.valueOf(VotesU18));
		sb.append(",VotesU18M="+String.valueOf(VotesU18M));
		sb.append(",VotesU18F="+String.valueOf(VotesU18F));
		sb.append(",Votes1829="+String.valueOf(Votes1829));
		sb.append(",Votes1829M="+String.valueOf(Votes1829M));
		sb.append(",Votes1829F="+String.valueOf(Votes1829F));
		sb.append(",Votes3044="+String.valueOf(Votes3044));
		sb.append(",Votes3044M="+String.valueOf(Votes3044M));
		sb.append(",Votes3044F="+String.valueOf(Votes3044F));
		sb.append(",Votes45A="+String.valueOf(Votes45A));
		sb.append(",Votes45AM="+String.valueOf(Votes45AM));
		sb.append(",Votes45AF="+String.valueOf(Votes45AF));
		sb.append(",VotesIMDB="+String.valueOf(VotesIMDB));
		sb.append(",Votes1000="+String.valueOf(Votes1000));
		sb.append(",VotesUS="+String.valueOf(VotesUS));
		sb.append(",VotesnUS="+String.valueOf(VotesnUS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_TAL1_imdb = new byte[0];
    static byte[] commonByteArray_TAL1_imdb = new byte[0];

	
			    public Integer X;

				public Integer getX () {
					return this.X;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String MetaCritic;

				public String getMetaCritic () {
					return this.MetaCritic;
				}
				
			    public String Runtime;

				public String getRuntime () {
					return this.Runtime;
				}
				
			    public Integer CVotes10;

				public Integer getCVotes10 () {
					return this.CVotes10;
				}
				
			    public Integer CVotes09;

				public Integer getCVotes09 () {
					return this.CVotes09;
				}
				
			    public Integer CVotes08;

				public Integer getCVotes08 () {
					return this.CVotes08;
				}
				
			    public Integer CVotes07;

				public Integer getCVotes07 () {
					return this.CVotes07;
				}
				
			    public Integer CVotes06;

				public Integer getCVotes06 () {
					return this.CVotes06;
				}
				
			    public Integer CVotes05;

				public Integer getCVotes05 () {
					return this.CVotes05;
				}
				
			    public Integer CVotes04;

				public Integer getCVotes04 () {
					return this.CVotes04;
				}
				
			    public Integer CVotes03;

				public Integer getCVotes03 () {
					return this.CVotes03;
				}
				
			    public Integer CVotes02;

				public Integer getCVotes02 () {
					return this.CVotes02;
				}
				
			    public Integer CVotes01;

				public Integer getCVotes01 () {
					return this.CVotes01;
				}
				
			    public Integer CVotesMale;

				public Integer getCVotesMale () {
					return this.CVotesMale;
				}
				
			    public Integer CVotesFemale;

				public Integer getCVotesFemale () {
					return this.CVotesFemale;
				}
				
			    public Integer CVotesU18;

				public Integer getCVotesU18 () {
					return this.CVotesU18;
				}
				
			    public Integer CVotesU18M;

				public Integer getCVotesU18M () {
					return this.CVotesU18M;
				}
				
			    public Integer CVotesU18F;

				public Integer getCVotesU18F () {
					return this.CVotesU18F;
				}
				
			    public Integer CVotes1829;

				public Integer getCVotes1829 () {
					return this.CVotes1829;
				}
				
			    public Integer CVotes1829M;

				public Integer getCVotes1829M () {
					return this.CVotes1829M;
				}
				
			    public Integer CVotes1829F;

				public Integer getCVotes1829F () {
					return this.CVotes1829F;
				}
				
			    public Integer CVotes3044;

				public Integer getCVotes3044 () {
					return this.CVotes3044;
				}
				
			    public Integer CVotes3044M;

				public Integer getCVotes3044M () {
					return this.CVotes3044M;
				}
				
			    public Integer CVotes3044F;

				public Integer getCVotes3044F () {
					return this.CVotes3044F;
				}
				
			    public Integer CVotes45A;

				public Integer getCVotes45A () {
					return this.CVotes45A;
				}
				
			    public Integer CVotes45AM;

				public Integer getCVotes45AM () {
					return this.CVotes45AM;
				}
				
			    public Integer CVotes45AF;

				public Integer getCVotes45AF () {
					return this.CVotes45AF;
				}
				
			    public Integer CVotes1000;

				public Integer getCVotes1000 () {
					return this.CVotes1000;
				}
				
			    public Integer CVotesUS;

				public Integer getCVotesUS () {
					return this.CVotesUS;
				}
				
			    public Integer CVotesnUS;

				public Integer getCVotesnUS () {
					return this.CVotesnUS;
				}
				
			    public Float VotesM;

				public Float getVotesM () {
					return this.VotesM;
				}
				
			    public Float VotesF;

				public Float getVotesF () {
					return this.VotesF;
				}
				
			    public Float VotesU18;

				public Float getVotesU18 () {
					return this.VotesU18;
				}
				
			    public Float VotesU18M;

				public Float getVotesU18M () {
					return this.VotesU18M;
				}
				
			    public Float VotesU18F;

				public Float getVotesU18F () {
					return this.VotesU18F;
				}
				
			    public Float Votes1829;

				public Float getVotes1829 () {
					return this.Votes1829;
				}
				
			    public Float Votes1829M;

				public Float getVotes1829M () {
					return this.Votes1829M;
				}
				
			    public Float Votes1829F;

				public Float getVotes1829F () {
					return this.Votes1829F;
				}
				
			    public Float Votes3044;

				public Float getVotes3044 () {
					return this.Votes3044;
				}
				
			    public Float Votes3044M;

				public Float getVotes3044M () {
					return this.Votes3044M;
				}
				
			    public Float Votes3044F;

				public Float getVotes3044F () {
					return this.Votes3044F;
				}
				
			    public Float Votes45A;

				public Float getVotes45A () {
					return this.Votes45A;
				}
				
			    public Float Votes45AM;

				public Float getVotes45AM () {
					return this.Votes45AM;
				}
				
			    public Float Votes45AF;

				public Float getVotes45AF () {
					return this.Votes45AF;
				}
				
			    public Float VotesIMDB;

				public Float getVotesIMDB () {
					return this.VotesIMDB;
				}
				
			    public Float Votes1000;

				public Float getVotes1000 () {
					return this.Votes1000;
				}
				
			    public Float VotesUS;

				public Float getVotesUS () {
					return this.VotesUS;
				}
				
			    public Float VotesnUS;

				public Float getVotesnUS () {
					return this.VotesnUS;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TAL1_imdb.length) {
				if(length < 1024 && commonByteArray_TAL1_imdb.length == 0) {
   					commonByteArray_TAL1_imdb = new byte[1024];
				} else {
   					commonByteArray_TAL1_imdb = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_TAL1_imdb, 0, length);
			strReturn = new String(commonByteArray_TAL1_imdb, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_TAL1_imdb.length) {
				if(length < 1024 && commonByteArray_TAL1_imdb.length == 0) {
   					commonByteArray_TAL1_imdb = new byte[1024];
				} else {
   					commonByteArray_TAL1_imdb = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_TAL1_imdb, 0, length);
			strReturn = new String(commonByteArray_TAL1_imdb, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
					this.Title = readString(dis);
					
					this.MetaCritic = readString(dis);
					
					this.Runtime = readString(dis);
					
						this.CVotes10 = readInteger(dis);
					
						this.CVotes09 = readInteger(dis);
					
						this.CVotes08 = readInteger(dis);
					
						this.CVotes07 = readInteger(dis);
					
						this.CVotes06 = readInteger(dis);
					
						this.CVotes05 = readInteger(dis);
					
						this.CVotes04 = readInteger(dis);
					
						this.CVotes03 = readInteger(dis);
					
						this.CVotes02 = readInteger(dis);
					
						this.CVotes01 = readInteger(dis);
					
						this.CVotesMale = readInteger(dis);
					
						this.CVotesFemale = readInteger(dis);
					
						this.CVotesU18 = readInteger(dis);
					
						this.CVotesU18M = readInteger(dis);
					
						this.CVotesU18F = readInteger(dis);
					
						this.CVotes1829 = readInteger(dis);
					
						this.CVotes1829M = readInteger(dis);
					
						this.CVotes1829F = readInteger(dis);
					
						this.CVotes3044 = readInteger(dis);
					
						this.CVotes3044M = readInteger(dis);
					
						this.CVotes3044F = readInteger(dis);
					
						this.CVotes45A = readInteger(dis);
					
						this.CVotes45AM = readInteger(dis);
					
						this.CVotes45AF = readInteger(dis);
					
						this.CVotes1000 = readInteger(dis);
					
						this.CVotesUS = readInteger(dis);
					
						this.CVotesnUS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesM = null;
           				} else {
           			    	this.VotesM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesF = null;
           				} else {
           			    	this.VotesF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18 = null;
           				} else {
           			    	this.VotesU18 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18M = null;
           				} else {
           			    	this.VotesU18M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18F = null;
           				} else {
           			    	this.VotesU18F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829 = null;
           				} else {
           			    	this.Votes1829 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829M = null;
           				} else {
           			    	this.Votes1829M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829F = null;
           				} else {
           			    	this.Votes1829F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044 = null;
           				} else {
           			    	this.Votes3044 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044M = null;
           				} else {
           			    	this.Votes3044M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044F = null;
           				} else {
           			    	this.Votes3044F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45A = null;
           				} else {
           			    	this.Votes45A = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AM = null;
           				} else {
           			    	this.Votes45AM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AF = null;
           				} else {
           			    	this.Votes45AF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesIMDB = null;
           				} else {
           			    	this.VotesIMDB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1000 = null;
           				} else {
           			    	this.Votes1000 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesUS = null;
           				} else {
           			    	this.VotesUS = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesnUS = null;
           				} else {
           			    	this.VotesnUS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
					this.Title = readString(dis);
					
					this.MetaCritic = readString(dis);
					
					this.Runtime = readString(dis);
					
						this.CVotes10 = readInteger(dis);
					
						this.CVotes09 = readInteger(dis);
					
						this.CVotes08 = readInteger(dis);
					
						this.CVotes07 = readInteger(dis);
					
						this.CVotes06 = readInteger(dis);
					
						this.CVotes05 = readInteger(dis);
					
						this.CVotes04 = readInteger(dis);
					
						this.CVotes03 = readInteger(dis);
					
						this.CVotes02 = readInteger(dis);
					
						this.CVotes01 = readInteger(dis);
					
						this.CVotesMale = readInteger(dis);
					
						this.CVotesFemale = readInteger(dis);
					
						this.CVotesU18 = readInteger(dis);
					
						this.CVotesU18M = readInteger(dis);
					
						this.CVotesU18F = readInteger(dis);
					
						this.CVotes1829 = readInteger(dis);
					
						this.CVotes1829M = readInteger(dis);
					
						this.CVotes1829F = readInteger(dis);
					
						this.CVotes3044 = readInteger(dis);
					
						this.CVotes3044M = readInteger(dis);
					
						this.CVotes3044F = readInteger(dis);
					
						this.CVotes45A = readInteger(dis);
					
						this.CVotes45AM = readInteger(dis);
					
						this.CVotes45AF = readInteger(dis);
					
						this.CVotes1000 = readInteger(dis);
					
						this.CVotesUS = readInteger(dis);
					
						this.CVotesnUS = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesM = null;
           				} else {
           			    	this.VotesM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesF = null;
           				} else {
           			    	this.VotesF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18 = null;
           				} else {
           			    	this.VotesU18 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18M = null;
           				} else {
           			    	this.VotesU18M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18F = null;
           				} else {
           			    	this.VotesU18F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829 = null;
           				} else {
           			    	this.Votes1829 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829M = null;
           				} else {
           			    	this.Votes1829M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829F = null;
           				} else {
           			    	this.Votes1829F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044 = null;
           				} else {
           			    	this.Votes3044 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044M = null;
           				} else {
           			    	this.Votes3044M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044F = null;
           				} else {
           			    	this.Votes3044F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45A = null;
           				} else {
           			    	this.Votes45A = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AM = null;
           				} else {
           			    	this.Votes45AM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AF = null;
           				} else {
           			    	this.Votes45AF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesIMDB = null;
           				} else {
           			    	this.VotesIMDB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1000 = null;
           				} else {
           			    	this.Votes1000 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesUS = null;
           				} else {
           			    	this.VotesUS = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesnUS = null;
           				} else {
           			    	this.VotesnUS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MetaCritic,dos);
					
					// String
				
						writeString(this.Runtime,dos);
					
					// Integer
				
						writeInteger(this.CVotes10,dos);
					
					// Integer
				
						writeInteger(this.CVotes09,dos);
					
					// Integer
				
						writeInteger(this.CVotes08,dos);
					
					// Integer
				
						writeInteger(this.CVotes07,dos);
					
					// Integer
				
						writeInteger(this.CVotes06,dos);
					
					// Integer
				
						writeInteger(this.CVotes05,dos);
					
					// Integer
				
						writeInteger(this.CVotes04,dos);
					
					// Integer
				
						writeInteger(this.CVotes03,dos);
					
					// Integer
				
						writeInteger(this.CVotes02,dos);
					
					// Integer
				
						writeInteger(this.CVotes01,dos);
					
					// Integer
				
						writeInteger(this.CVotesMale,dos);
					
					// Integer
				
						writeInteger(this.CVotesFemale,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18M,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18F,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829M,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829F,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044M,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044F,dos);
					
					// Integer
				
						writeInteger(this.CVotes45A,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AM,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AF,dos);
					
					// Integer
				
						writeInteger(this.CVotes1000,dos);
					
					// Integer
				
						writeInteger(this.CVotesUS,dos);
					
					// Integer
				
						writeInteger(this.CVotesnUS,dos);
					
					// Float
				
						if(this.VotesM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesM);
		            	}
					
					// Float
				
						if(this.VotesF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesF);
		            	}
					
					// Float
				
						if(this.VotesU18 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18);
		            	}
					
					// Float
				
						if(this.VotesU18M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18M);
		            	}
					
					// Float
				
						if(this.VotesU18F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18F);
		            	}
					
					// Float
				
						if(this.Votes1829 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829);
		            	}
					
					// Float
				
						if(this.Votes1829M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829M);
		            	}
					
					// Float
				
						if(this.Votes1829F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829F);
		            	}
					
					// Float
				
						if(this.Votes3044 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044);
		            	}
					
					// Float
				
						if(this.Votes3044M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044M);
		            	}
					
					// Float
				
						if(this.Votes3044F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044F);
		            	}
					
					// Float
				
						if(this.Votes45A == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45A);
		            	}
					
					// Float
				
						if(this.Votes45AM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AM);
		            	}
					
					// Float
				
						if(this.Votes45AF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AF);
		            	}
					
					// Float
				
						if(this.VotesIMDB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesIMDB);
		            	}
					
					// Float
				
						if(this.Votes1000 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1000);
		            	}
					
					// Float
				
						if(this.VotesUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesUS);
		            	}
					
					// Float
				
						if(this.VotesnUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesnUS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MetaCritic,dos);
					
					// String
				
						writeString(this.Runtime,dos);
					
					// Integer
				
						writeInteger(this.CVotes10,dos);
					
					// Integer
				
						writeInteger(this.CVotes09,dos);
					
					// Integer
				
						writeInteger(this.CVotes08,dos);
					
					// Integer
				
						writeInteger(this.CVotes07,dos);
					
					// Integer
				
						writeInteger(this.CVotes06,dos);
					
					// Integer
				
						writeInteger(this.CVotes05,dos);
					
					// Integer
				
						writeInteger(this.CVotes04,dos);
					
					// Integer
				
						writeInteger(this.CVotes03,dos);
					
					// Integer
				
						writeInteger(this.CVotes02,dos);
					
					// Integer
				
						writeInteger(this.CVotes01,dos);
					
					// Integer
				
						writeInteger(this.CVotesMale,dos);
					
					// Integer
				
						writeInteger(this.CVotesFemale,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18M,dos);
					
					// Integer
				
						writeInteger(this.CVotesU18F,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829M,dos);
					
					// Integer
				
						writeInteger(this.CVotes1829F,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044M,dos);
					
					// Integer
				
						writeInteger(this.CVotes3044F,dos);
					
					// Integer
				
						writeInteger(this.CVotes45A,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AM,dos);
					
					// Integer
				
						writeInteger(this.CVotes45AF,dos);
					
					// Integer
				
						writeInteger(this.CVotes1000,dos);
					
					// Integer
				
						writeInteger(this.CVotesUS,dos);
					
					// Integer
				
						writeInteger(this.CVotesnUS,dos);
					
					// Float
				
						if(this.VotesM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesM);
		            	}
					
					// Float
				
						if(this.VotesF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesF);
		            	}
					
					// Float
				
						if(this.VotesU18 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18);
		            	}
					
					// Float
				
						if(this.VotesU18M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18M);
		            	}
					
					// Float
				
						if(this.VotesU18F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18F);
		            	}
					
					// Float
				
						if(this.Votes1829 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829);
		            	}
					
					// Float
				
						if(this.Votes1829M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829M);
		            	}
					
					// Float
				
						if(this.Votes1829F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829F);
		            	}
					
					// Float
				
						if(this.Votes3044 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044);
		            	}
					
					// Float
				
						if(this.Votes3044M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044M);
		            	}
					
					// Float
				
						if(this.Votes3044F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044F);
		            	}
					
					// Float
				
						if(this.Votes45A == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45A);
		            	}
					
					// Float
				
						if(this.Votes45AM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AM);
		            	}
					
					// Float
				
						if(this.Votes45AF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AF);
		            	}
					
					// Float
				
						if(this.VotesIMDB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesIMDB);
		            	}
					
					// Float
				
						if(this.Votes1000 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1000);
		            	}
					
					// Float
				
						if(this.VotesUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesUS);
		            	}
					
					// Float
				
						if(this.VotesnUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesnUS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("X="+String.valueOf(X));
		sb.append(",Title="+Title);
		sb.append(",MetaCritic="+MetaCritic);
		sb.append(",Runtime="+Runtime);
		sb.append(",CVotes10="+String.valueOf(CVotes10));
		sb.append(",CVotes09="+String.valueOf(CVotes09));
		sb.append(",CVotes08="+String.valueOf(CVotes08));
		sb.append(",CVotes07="+String.valueOf(CVotes07));
		sb.append(",CVotes06="+String.valueOf(CVotes06));
		sb.append(",CVotes05="+String.valueOf(CVotes05));
		sb.append(",CVotes04="+String.valueOf(CVotes04));
		sb.append(",CVotes03="+String.valueOf(CVotes03));
		sb.append(",CVotes02="+String.valueOf(CVotes02));
		sb.append(",CVotes01="+String.valueOf(CVotes01));
		sb.append(",CVotesMale="+String.valueOf(CVotesMale));
		sb.append(",CVotesFemale="+String.valueOf(CVotesFemale));
		sb.append(",CVotesU18="+String.valueOf(CVotesU18));
		sb.append(",CVotesU18M="+String.valueOf(CVotesU18M));
		sb.append(",CVotesU18F="+String.valueOf(CVotesU18F));
		sb.append(",CVotes1829="+String.valueOf(CVotes1829));
		sb.append(",CVotes1829M="+String.valueOf(CVotes1829M));
		sb.append(",CVotes1829F="+String.valueOf(CVotes1829F));
		sb.append(",CVotes3044="+String.valueOf(CVotes3044));
		sb.append(",CVotes3044M="+String.valueOf(CVotes3044M));
		sb.append(",CVotes3044F="+String.valueOf(CVotes3044F));
		sb.append(",CVotes45A="+String.valueOf(CVotes45A));
		sb.append(",CVotes45AM="+String.valueOf(CVotes45AM));
		sb.append(",CVotes45AF="+String.valueOf(CVotes45AF));
		sb.append(",CVotes1000="+String.valueOf(CVotes1000));
		sb.append(",CVotesUS="+String.valueOf(CVotesUS));
		sb.append(",CVotesnUS="+String.valueOf(CVotesnUS));
		sb.append(",VotesM="+String.valueOf(VotesM));
		sb.append(",VotesF="+String.valueOf(VotesF));
		sb.append(",VotesU18="+String.valueOf(VotesU18));
		sb.append(",VotesU18M="+String.valueOf(VotesU18M));
		sb.append(",VotesU18F="+String.valueOf(VotesU18F));
		sb.append(",Votes1829="+String.valueOf(Votes1829));
		sb.append(",Votes1829M="+String.valueOf(Votes1829M));
		sb.append(",Votes1829F="+String.valueOf(Votes1829F));
		sb.append(",Votes3044="+String.valueOf(Votes3044));
		sb.append(",Votes3044M="+String.valueOf(Votes3044M));
		sb.append(",Votes3044F="+String.valueOf(Votes3044F));
		sb.append(",Votes45A="+String.valueOf(Votes45A));
		sb.append(",Votes45AM="+String.valueOf(Votes45AM));
		sb.append(",Votes45AF="+String.valueOf(Votes45AF));
		sb.append(",VotesIMDB="+String.valueOf(VotesIMDB));
		sb.append(",Votes1000="+String.valueOf(Votes1000));
		sb.append(",VotesUS="+String.valueOf(VotesUS));
		sb.append(",VotesnUS="+String.valueOf(VotesnUS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputJSON_1Process(globalMap);
		tFileInputExcel_1Process(globalMap);

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();
row4Struct row4 = new row4Struct();
out2Struct out2 = new out2Struct();






	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/out2.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */","/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("X");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Title");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("MetaCritic");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Runtime");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes10");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes09");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes08");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes07");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes06");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes05");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes04");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes03");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes02");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes01");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotesMale");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotesFemale");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotesU18");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotesU18M");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotesU18F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes1829");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes1829M");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes1829F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes3044");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes3044M");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes3044F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes45A");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes45AM");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes45AF");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotes1000");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotesUS");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CVotesnUS");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("VotesM");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("VotesF");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("VotesU18");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("VotesU18M");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("VotesU18F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Votes1829");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Votes1829M");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Votes1829F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Votes3044");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Votes3044M");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Votes3044F");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Votes45A");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Votes45AM");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Votes45AF");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("VotesIMDB");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Votes1000");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("VotesnUS");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("TotalVotes");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Budget");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Domestic");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Foreign");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("VotesUS");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Worldwide");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Rating");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Genre1");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Genre2");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Genre3");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */




	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = ",";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/IMDB.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/IMDB.csv", "UTF-8",",","\n",false,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row1 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row1 = new row1Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.X = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"X", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.X = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row1.Title = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row1.MetaCritic = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row1.Runtime = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes10 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes10", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes10 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes09 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes09", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes09 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes08 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes08", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes08 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes07 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes07", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes07 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes06 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes06", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes06 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes05 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes05", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes05 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes04 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes04", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes04 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes03 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes03", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes03 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes02 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes02", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes02 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes01 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes01", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes01 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotesMale = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotesMale", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotesMale = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotesFemale = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotesFemale", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotesFemale = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotesU18 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotesU18", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotesU18 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotesU18M = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotesU18M", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotesU18M = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotesU18F = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotesU18F", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotesU18F = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes1829 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes1829", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes1829 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes1829M = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes1829M", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes1829M = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes1829F = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes1829F", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes1829F = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes3044 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes3044", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes3044 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes3044M = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes3044M", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes3044M = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes3044F = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes3044F", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes3044F = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes45A = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes45A", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes45A = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes45AM = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes45AM", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes45AM = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes45AF = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes45AF", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes45AF = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotes1000 = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotes1000", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotes1000 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotesUS = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotesUS", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotesUS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.CVotesnUS = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CVotesnUS", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.CVotesnUS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.VotesM = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"VotesM", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.VotesM = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.VotesF = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"VotesF", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.VotesF = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.VotesU18 = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"VotesU18", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.VotesU18 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.VotesU18M = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"VotesU18M", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.VotesU18M = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.VotesU18F = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"VotesU18F", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.VotesU18F = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Votes1829 = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Votes1829", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Votes1829 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Votes1829M = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Votes1829M", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Votes1829M = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Votes1829F = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Votes1829F", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Votes1829F = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Votes3044 = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Votes3044", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Votes3044 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Votes3044M = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Votes3044M", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Votes3044M = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 41;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Votes3044F = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Votes3044F", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Votes3044F = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 42;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Votes45A = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Votes45A", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Votes45A = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 43;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Votes45AM = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Votes45AM", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Votes45AM = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 44;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Votes45AF = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Votes45AF", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Votes45AF = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 45;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.VotesIMDB = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"VotesIMDB", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.VotesIMDB = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 46;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.Votes1000 = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Votes1000", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.Votes1000 = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 47;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.VotesUS = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"VotesUS", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.VotesUS = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 48;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row1.VotesnUS = ParserUtils.parseTo_Float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"VotesnUS", "row1", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row1.VotesnUS = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row1 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.X = row1.X ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row2.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.X = '" + row2HashKey.X + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row3HashKey.X = row1.X ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row3.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.X = '" + row3HashKey.X + "'");
								} // G 071
							

							row3Struct row3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;
out2 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'out1'
out1_tmp.X = row1.X ;
out1_tmp.Title = row1.Title ;
out1_tmp.MetaCritic = row1.MetaCritic ;
out1_tmp.Runtime = row1.Runtime ;
out1_tmp.CVotes10 = row1.CVotes10 ;
out1_tmp.CVotes09 = row1.CVotes09 ;
out1_tmp.CVotes08 = row1.CVotes08 ;
out1_tmp.CVotes07 = row1.CVotes07 ;
out1_tmp.CVotes06 = row1.CVotes06 ;
out1_tmp.CVotes05 = row1.CVotes05 ;
out1_tmp.CVotes04 = row1.CVotes04 ;
out1_tmp.CVotes03 = row1.CVotes03 ;
out1_tmp.CVotes02 = row1.CVotes02 ;
out1_tmp.CVotes01 = row1.CVotes01 ;
out1_tmp.CVotesMale = row1.CVotesMale ;
out1_tmp.CVotesFemale = row1.CVotesFemale ;
out1_tmp.CVotesU18 = row1.CVotesU18 ;
out1_tmp.CVotesU18M = row1.CVotesU18M ;
out1_tmp.CVotesU18F = row1.CVotesU18F ;
out1_tmp.CVotes1829 = row1.CVotes1829 ;
out1_tmp.CVotes1829M = row1.CVotes1829M ;
out1_tmp.CVotes1829F = row1.CVotes1829F ;
out1_tmp.CVotes3044 = row1.CVotes3044 ;
out1_tmp.CVotes3044M = row1.CVotes3044M ;
out1_tmp.CVotes3044F = row1.CVotes3044F ;
out1_tmp.CVotes45A = row1.CVotes45A ;
out1_tmp.CVotes45AM = row1.CVotes45AM ;
out1_tmp.CVotes45AF = row1.CVotes45AF ;
out1_tmp.CVotes1000 = row1.CVotes1000 ;
out1_tmp.CVotesUS = row1.CVotesUS ;
out1_tmp.CVotesnUS = row1.CVotesnUS ;
out1_tmp.VotesM = row1.VotesM ;
out1_tmp.VotesF = row1.VotesF ;
out1_tmp.VotesU18 = row1.VotesU18 ;
out1_tmp.VotesU18M = row1.VotesU18M ;
out1_tmp.VotesU18F = row1.VotesU18F ;
out1_tmp.Votes1829 = row1.Votes1829 ;
out1_tmp.Votes1829M = row1.Votes1829M ;
out1_tmp.Votes1829F = row1.Votes1829F ;
out1_tmp.Votes3044 = row1.Votes3044 ;
out1_tmp.Votes3044M = row1.Votes3044M ;
out1_tmp.Votes3044F = row1.Votes3044F ;
out1_tmp.Votes45A = row1.Votes45A ;
out1_tmp.Votes45AM = row1.Votes45AM ;
out1_tmp.Votes45AF = row1.Votes45AF ;
out1_tmp.VotesIMDB = row1.VotesIMDB ;
out1_tmp.Votes1000 = row1.Votes1000 ;
out1_tmp.VotesnUS = row1.VotesnUS ;
out1_tmp.TotalVotes = row2.TotalVotes ;
out1_tmp.Budget = row2.Budget ;
out1_tmp.Domestic = row2.Domestic ;
out1_tmp.Foreign = row2.Foreign ;
out1_tmp.VotesUS = row1.VotesUS ;
out1_tmp.Worldwide = row2.Worldwide ;
out1_tmp.Rating = row3.Rating ;
out1_tmp.Genre1 = row3.Genre1 ;
out1_tmp.Genre2 = row3.Genre2 ;
out1_tmp.Genre3 = row3.Genre3 ;
out1 = out1_tmp;
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out2'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
out2_tmp.X = row1.X ;
out2_tmp.Title = row1.Title ;
out2_tmp.X_1 = row2.X ;
out2_tmp.Title_1 = row2.Title ;
out2_tmp.X_2 = row3.X ;
out2_tmp.Title_2 = row3.Title ;
out2 = out2_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

          row4 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");    
        ope_tFilterRow_1.matches((out1.MetaCritic == null? false : out1.MetaCritic.matches("NA") == true)
                       , " MetaCritic.matches(\"NA\") == true failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row4 == null){ 
                row4 = new row4Struct();
              }
               row4.X = out1.X;
               row4.Title = out1.Title;
               row4.MetaCritic = out1.MetaCritic;
               row4.Runtime = out1.Runtime;
               row4.CVotes10 = out1.CVotes10;
               row4.CVotes09 = out1.CVotes09;
               row4.CVotes08 = out1.CVotes08;
               row4.CVotes07 = out1.CVotes07;
               row4.CVotes06 = out1.CVotes06;
               row4.CVotes05 = out1.CVotes05;
               row4.CVotes04 = out1.CVotes04;
               row4.CVotes03 = out1.CVotes03;
               row4.CVotes02 = out1.CVotes02;
               row4.CVotes01 = out1.CVotes01;
               row4.CVotesMale = out1.CVotesMale;
               row4.CVotesFemale = out1.CVotesFemale;
               row4.CVotesU18 = out1.CVotesU18;
               row4.CVotesU18M = out1.CVotesU18M;
               row4.CVotesU18F = out1.CVotesU18F;
               row4.CVotes1829 = out1.CVotes1829;
               row4.CVotes1829M = out1.CVotes1829M;
               row4.CVotes1829F = out1.CVotes1829F;
               row4.CVotes3044 = out1.CVotes3044;
               row4.CVotes3044M = out1.CVotes3044M;
               row4.CVotes3044F = out1.CVotes3044F;
               row4.CVotes45A = out1.CVotes45A;
               row4.CVotes45AM = out1.CVotes45AM;
               row4.CVotes45AF = out1.CVotes45AF;
               row4.CVotes1000 = out1.CVotes1000;
               row4.CVotesUS = out1.CVotesUS;
               row4.CVotesnUS = out1.CVotesnUS;
               row4.VotesM = out1.VotesM;
               row4.VotesF = out1.VotesF;
               row4.VotesU18 = out1.VotesU18;
               row4.VotesU18M = out1.VotesU18M;
               row4.VotesU18F = out1.VotesU18F;
               row4.Votes1829 = out1.Votes1829;
               row4.Votes1829M = out1.Votes1829M;
               row4.Votes1829F = out1.Votes1829F;
               row4.Votes3044 = out1.Votes3044;
               row4.Votes3044M = out1.Votes3044M;
               row4.Votes3044F = out1.Votes3044F;
               row4.Votes45A = out1.Votes45A;
               row4.Votes45AM = out1.Votes45AM;
               row4.Votes45AF = out1.Votes45AF;
               row4.VotesIMDB = out1.VotesIMDB;
               row4.Votes1000 = out1.Votes1000;
               row4.VotesnUS = out1.VotesnUS;
               row4.TotalVotes = out1.TotalVotes;
               row4.Budget = out1.Budget;
               row4.Domestic = out1.Domestic;
               row4.Foreign = out1.Foreign;
               row4.VotesUS = out1.VotesUS;
               row4.Worldwide = out1.Worldwide;
               row4.Rating = out1.Rating;
               row4.Genre1 = out1.Genre1;
               row4.Genre2 = out1.Genre2;
               row4.Genre3 = out1.Genre3;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row4"
if(row4 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row4.X != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.X
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Title != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Title
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.MetaCritic != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.MetaCritic
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Runtime != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Runtime
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes10 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes10
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes09 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes09
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes08 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes08
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes07 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes07
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes06 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes06
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes05 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes05
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes04 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes04
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes03 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes03
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes02 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes02
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes01 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes01
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotesMale != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotesMale
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotesFemale != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotesFemale
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotesU18 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotesU18
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotesU18M != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotesU18M
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotesU18F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotesU18F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes1829 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes1829
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes1829M != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes1829M
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes1829F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes1829F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes3044 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes3044
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes3044M != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes3044M
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes3044F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes3044F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes45A != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes45A
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes45AM != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes45AM
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes45AF != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes45AF
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotes1000 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotes1000
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotesUS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotesUS
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.CVotesnUS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.CVotesnUS
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.VotesM != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.VotesM
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.VotesF != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.VotesF
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.VotesU18 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.VotesU18
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.VotesU18M != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.VotesU18M
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.VotesU18F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.VotesU18F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Votes1829 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Votes1829
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Votes1829M != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Votes1829M
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Votes1829F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Votes1829F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Votes3044 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Votes3044
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Votes3044M != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Votes3044M
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Votes3044F != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Votes3044F
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Votes45A != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Votes45A
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Votes45AM != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Votes45AM
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Votes45AF != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Votes45AF
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.VotesIMDB != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.VotesIMDB
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Votes1000 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Votes1000
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.VotesnUS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.VotesnUS
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.TotalVotes != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.TotalVotes
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Budget != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Budget
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Domestic != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Domestic
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Foreign != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Foreign
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.VotesUS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.VotesUS
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Worldwide != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Worldwide
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Rating != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Rating
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Genre1 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Genre1
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Genre2 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Genre2
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row4.Genre3 != null) {
                        sb_tFileOutputDelimited_1.append(
                            row4.Genre3
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "row4"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(out2.X != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.X)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append(",");
    			


   				
	    		if(out2.Title != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.Title)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append(",");
    			


   				
	    		if(out2.X_1 != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.X_1)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append(",");
    			


   				
	    		if(out2.Title_1 != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.Title_1)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append(",");
    			


   				
	    		if(out2.X_2 != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.X_2)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append(",");
    			


   				
	    		if(out2.Title_2 != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(out2.Title_2)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)("C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/IMDB.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */







	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */







	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_TAL1_imdb = new byte[0];
    static byte[] commonByteArray_TAL1_imdb = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer X;

				public Integer getX () {
					return this.X;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public Integer TotalVotes;

				public Integer getTotalVotes () {
					return this.TotalVotes;
				}
				
			    public String MetaCritic;

				public String getMetaCritic () {
					return this.MetaCritic;
				}
				
			    public String Budget;

				public String getBudget () {
					return this.Budget;
				}
				
			    public String Runtime;

				public String getRuntime () {
					return this.Runtime;
				}
				
			    public Integer CVotes10;

				public Integer getCVotes10 () {
					return this.CVotes10;
				}
				
			    public Integer CVotes09;

				public Integer getCVotes09 () {
					return this.CVotes09;
				}
				
			    public Integer CVotes08;

				public Integer getCVotes08 () {
					return this.CVotes08;
				}
				
			    public Integer CVotes07;

				public Integer getCVotes07 () {
					return this.CVotes07;
				}
				
			    public Integer CVotes06;

				public Integer getCVotes06 () {
					return this.CVotes06;
				}
				
			    public Integer CVotes05;

				public Integer getCVotes05 () {
					return this.CVotes05;
				}
				
			    public Integer CVotes04;

				public Integer getCVotes04 () {
					return this.CVotes04;
				}
				
			    public Integer CVotes03;

				public Integer getCVotes03 () {
					return this.CVotes03;
				}
				
			    public Integer CVotes02;

				public Integer getCVotes02 () {
					return this.CVotes02;
				}
				
			    public Integer CVotes01;

				public Integer getCVotes01 () {
					return this.CVotes01;
				}
				
			    public Integer CVotesMale;

				public Integer getCVotesMale () {
					return this.CVotesMale;
				}
				
			    public Integer CVotesFemale;

				public Integer getCVotesFemale () {
					return this.CVotesFemale;
				}
				
			    public Integer CVotesU18;

				public Integer getCVotesU18 () {
					return this.CVotesU18;
				}
				
			    public Integer CVotesU18M;

				public Integer getCVotesU18M () {
					return this.CVotesU18M;
				}
				
			    public Integer CVotesU18F;

				public Integer getCVotesU18F () {
					return this.CVotesU18F;
				}
				
			    public Integer CVotes1829;

				public Integer getCVotes1829 () {
					return this.CVotes1829;
				}
				
			    public Integer CVotes1829M;

				public Integer getCVotes1829M () {
					return this.CVotes1829M;
				}
				
			    public Integer CVotes1829F;

				public Integer getCVotes1829F () {
					return this.CVotes1829F;
				}
				
			    public Integer CVotes3044;

				public Integer getCVotes3044 () {
					return this.CVotes3044;
				}
				
			    public Integer CVotes3044M;

				public Integer getCVotes3044M () {
					return this.CVotes3044M;
				}
				
			    public Integer CVotes3044F;

				public Integer getCVotes3044F () {
					return this.CVotes3044F;
				}
				
			    public Integer CVotes45A;

				public Integer getCVotes45A () {
					return this.CVotes45A;
				}
				
			    public Integer CVotes45AM;

				public Integer getCVotes45AM () {
					return this.CVotes45AM;
				}
				
			    public Integer CVotes45AF;

				public Integer getCVotes45AF () {
					return this.CVotes45AF;
				}
				
			    public Integer CVotes1000;

				public Integer getCVotes1000 () {
					return this.CVotes1000;
				}
				
			    public Integer CVotesUS;

				public Integer getCVotesUS () {
					return this.CVotesUS;
				}
				
			    public String CVotesnUS;

				public String getCVotesnUS () {
					return this.CVotesnUS;
				}
				
			    public Float VotesM;

				public Float getVotesM () {
					return this.VotesM;
				}
				
			    public Float VotesF;

				public Float getVotesF () {
					return this.VotesF;
				}
				
			    public Float VotesU18;

				public Float getVotesU18 () {
					return this.VotesU18;
				}
				
			    public Float VotesU18M;

				public Float getVotesU18M () {
					return this.VotesU18M;
				}
				
			    public Float VotesU18F;

				public Float getVotesU18F () {
					return this.VotesU18F;
				}
				
			    public Float Votes1829;

				public Float getVotes1829 () {
					return this.Votes1829;
				}
				
			    public Float Votes1829M;

				public Float getVotes1829M () {
					return this.Votes1829M;
				}
				
			    public Float Votes1829F;

				public Float getVotes1829F () {
					return this.Votes1829F;
				}
				
			    public Float Votes3044;

				public Float getVotes3044 () {
					return this.Votes3044;
				}
				
			    public Float Votes3044M;

				public Float getVotes3044M () {
					return this.Votes3044M;
				}
				
			    public Float Votes3044F;

				public Float getVotes3044F () {
					return this.Votes3044F;
				}
				
			    public Float Votes45A;

				public Float getVotes45A () {
					return this.Votes45A;
				}
				
			    public Float Votes45AM;

				public Float getVotes45AM () {
					return this.Votes45AM;
				}
				
			    public Float Votes45AF;

				public Float getVotes45AF () {
					return this.Votes45AF;
				}
				
			    public Float VotesIMDB;

				public Float getVotesIMDB () {
					return this.VotesIMDB;
				}
				
			    public Float Votes1000;

				public Float getVotes1000 () {
					return this.Votes1000;
				}
				
			    public Float VotesUS;

				public Float getVotesUS () {
					return this.VotesUS;
				}
				
			    public String VotesnUS;

				public String getVotesnUS () {
					return this.VotesnUS;
				}
				
			    public String Domestic;

				public String getDomestic () {
					return this.Domestic;
				}
				
			    public String Foreign;

				public String getForeign () {
					return this.Foreign;
				}
				
			    public String Worldwide;

				public String getWorldwide () {
					return this.Worldwide;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.X == null) ? 0 : this.X.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.X == null) {
							if (other.X != null)
								return false;
						
						} else if (!this.X.equals(other.X))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.X = this.X;
	            other.Title = this.Title;
	            other.TotalVotes = this.TotalVotes;
	            other.MetaCritic = this.MetaCritic;
	            other.Budget = this.Budget;
	            other.Runtime = this.Runtime;
	            other.CVotes10 = this.CVotes10;
	            other.CVotes09 = this.CVotes09;
	            other.CVotes08 = this.CVotes08;
	            other.CVotes07 = this.CVotes07;
	            other.CVotes06 = this.CVotes06;
	            other.CVotes05 = this.CVotes05;
	            other.CVotes04 = this.CVotes04;
	            other.CVotes03 = this.CVotes03;
	            other.CVotes02 = this.CVotes02;
	            other.CVotes01 = this.CVotes01;
	            other.CVotesMale = this.CVotesMale;
	            other.CVotesFemale = this.CVotesFemale;
	            other.CVotesU18 = this.CVotesU18;
	            other.CVotesU18M = this.CVotesU18M;
	            other.CVotesU18F = this.CVotesU18F;
	            other.CVotes1829 = this.CVotes1829;
	            other.CVotes1829M = this.CVotes1829M;
	            other.CVotes1829F = this.CVotes1829F;
	            other.CVotes3044 = this.CVotes3044;
	            other.CVotes3044M = this.CVotes3044M;
	            other.CVotes3044F = this.CVotes3044F;
	            other.CVotes45A = this.CVotes45A;
	            other.CVotes45AM = this.CVotes45AM;
	            other.CVotes45AF = this.CVotes45AF;
	            other.CVotes1000 = this.CVotes1000;
	            other.CVotesUS = this.CVotesUS;
	            other.CVotesnUS = this.CVotesnUS;
	            other.VotesM = this.VotesM;
	            other.VotesF = this.VotesF;
	            other.VotesU18 = this.VotesU18;
	            other.VotesU18M = this.VotesU18M;
	            other.VotesU18F = this.VotesU18F;
	            other.Votes1829 = this.Votes1829;
	            other.Votes1829M = this.Votes1829M;
	            other.Votes1829F = this.Votes1829F;
	            other.Votes3044 = this.Votes3044;
	            other.Votes3044M = this.Votes3044M;
	            other.Votes3044F = this.Votes3044F;
	            other.Votes45A = this.Votes45A;
	            other.Votes45AM = this.Votes45AM;
	            other.Votes45AF = this.Votes45AF;
	            other.VotesIMDB = this.VotesIMDB;
	            other.Votes1000 = this.Votes1000;
	            other.VotesUS = this.VotesUS;
	            other.VotesnUS = this.VotesnUS;
	            other.Domestic = this.Domestic;
	            other.Foreign = this.Foreign;
	            other.Worldwide = this.Worldwide;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.X = this.X;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Title = readString(dis,ois);
					
						this.TotalVotes = readInteger(dis,ois);
					
						this.MetaCritic = readString(dis,ois);
					
						this.Budget = readString(dis,ois);
					
						this.Runtime = readString(dis,ois);
					
						this.CVotes10 = readInteger(dis,ois);
					
						this.CVotes09 = readInteger(dis,ois);
					
						this.CVotes08 = readInteger(dis,ois);
					
						this.CVotes07 = readInteger(dis,ois);
					
						this.CVotes06 = readInteger(dis,ois);
					
						this.CVotes05 = readInteger(dis,ois);
					
						this.CVotes04 = readInteger(dis,ois);
					
						this.CVotes03 = readInteger(dis,ois);
					
						this.CVotes02 = readInteger(dis,ois);
					
						this.CVotes01 = readInteger(dis,ois);
					
						this.CVotesMale = readInteger(dis,ois);
					
						this.CVotesFemale = readInteger(dis,ois);
					
						this.CVotesU18 = readInteger(dis,ois);
					
						this.CVotesU18M = readInteger(dis,ois);
					
						this.CVotesU18F = readInteger(dis,ois);
					
						this.CVotes1829 = readInteger(dis,ois);
					
						this.CVotes1829M = readInteger(dis,ois);
					
						this.CVotes1829F = readInteger(dis,ois);
					
						this.CVotes3044 = readInteger(dis,ois);
					
						this.CVotes3044M = readInteger(dis,ois);
					
						this.CVotes3044F = readInteger(dis,ois);
					
						this.CVotes45A = readInteger(dis,ois);
					
						this.CVotes45AM = readInteger(dis,ois);
					
						this.CVotes45AF = readInteger(dis,ois);
					
						this.CVotes1000 = readInteger(dis,ois);
					
						this.CVotesUS = readInteger(dis,ois);
					
						this.CVotesnUS = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesM = null;
           				} else {
           			    	this.VotesM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesF = null;
           				} else {
           			    	this.VotesF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18 = null;
           				} else {
           			    	this.VotesU18 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18M = null;
           				} else {
           			    	this.VotesU18M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesU18F = null;
           				} else {
           			    	this.VotesU18F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829 = null;
           				} else {
           			    	this.Votes1829 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829M = null;
           				} else {
           			    	this.Votes1829M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1829F = null;
           				} else {
           			    	this.Votes1829F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044 = null;
           				} else {
           			    	this.Votes3044 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044M = null;
           				} else {
           			    	this.Votes3044M = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes3044F = null;
           				} else {
           			    	this.Votes3044F = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45A = null;
           				} else {
           			    	this.Votes45A = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AM = null;
           				} else {
           			    	this.Votes45AM = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes45AF = null;
           				} else {
           			    	this.Votes45AF = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesIMDB = null;
           				} else {
           			    	this.VotesIMDB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Votes1000 = null;
           				} else {
           			    	this.Votes1000 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VotesUS = null;
           				} else {
           			    	this.VotesUS = dis.readFloat();
           				}
					
						this.VotesnUS = readString(dis,ois);
					
						this.Domestic = readString(dis,ois);
					
						this.Foreign = readString(dis,ois);
					
						this.Worldwide = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.Title = readString(dis,objectIn);
					
						this.TotalVotes = readInteger(dis,objectIn);
					
						this.MetaCritic = readString(dis,objectIn);
					
						this.Budget = readString(dis,objectIn);
					
						this.Runtime = readString(dis,objectIn);
					
						this.CVotes10 = readInteger(dis,objectIn);
					
						this.CVotes09 = readInteger(dis,objectIn);
					
						this.CVotes08 = readInteger(dis,objectIn);
					
						this.CVotes07 = readInteger(dis,objectIn);
					
						this.CVotes06 = readInteger(dis,objectIn);
					
						this.CVotes05 = readInteger(dis,objectIn);
					
						this.CVotes04 = readInteger(dis,objectIn);
					
						this.CVotes03 = readInteger(dis,objectIn);
					
						this.CVotes02 = readInteger(dis,objectIn);
					
						this.CVotes01 = readInteger(dis,objectIn);
					
						this.CVotesMale = readInteger(dis,objectIn);
					
						this.CVotesFemale = readInteger(dis,objectIn);
					
						this.CVotesU18 = readInteger(dis,objectIn);
					
						this.CVotesU18M = readInteger(dis,objectIn);
					
						this.CVotesU18F = readInteger(dis,objectIn);
					
						this.CVotes1829 = readInteger(dis,objectIn);
					
						this.CVotes1829M = readInteger(dis,objectIn);
					
						this.CVotes1829F = readInteger(dis,objectIn);
					
						this.CVotes3044 = readInteger(dis,objectIn);
					
						this.CVotes3044M = readInteger(dis,objectIn);
					
						this.CVotes3044F = readInteger(dis,objectIn);
					
						this.CVotes45A = readInteger(dis,objectIn);
					
						this.CVotes45AM = readInteger(dis,objectIn);
					
						this.CVotes45AF = readInteger(dis,objectIn);
					
						this.CVotes1000 = readInteger(dis,objectIn);
					
						this.CVotesUS = readInteger(dis,objectIn);
					
						this.CVotesnUS = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VotesM = null;
           				} else {
           			    	this.VotesM = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VotesF = null;
           				} else {
           			    	this.VotesF = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VotesU18 = null;
           				} else {
           			    	this.VotesU18 = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VotesU18M = null;
           				} else {
           			    	this.VotesU18M = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VotesU18F = null;
           				} else {
           			    	this.VotesU18F = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Votes1829 = null;
           				} else {
           			    	this.Votes1829 = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Votes1829M = null;
           				} else {
           			    	this.Votes1829M = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Votes1829F = null;
           				} else {
           			    	this.Votes1829F = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Votes3044 = null;
           				} else {
           			    	this.Votes3044 = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Votes3044M = null;
           				} else {
           			    	this.Votes3044M = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Votes3044F = null;
           				} else {
           			    	this.Votes3044F = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Votes45A = null;
           				} else {
           			    	this.Votes45A = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Votes45AM = null;
           				} else {
           			    	this.Votes45AM = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Votes45AF = null;
           				} else {
           			    	this.Votes45AF = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VotesIMDB = null;
           				} else {
           			    	this.VotesIMDB = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Votes1000 = null;
           				} else {
           			    	this.Votes1000 = objectIn.readFloat();
           				}
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.VotesUS = null;
           				} else {
           			    	this.VotesUS = objectIn.readFloat();
           				}
					
						this.VotesnUS = readString(dis,objectIn);
					
						this.Domestic = readString(dis,objectIn);
					
						this.Foreign = readString(dis,objectIn);
					
						this.Worldwide = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Title, dos, oos);
					
					writeInteger(this.TotalVotes, dos, oos);
					
						writeString(this.MetaCritic, dos, oos);
					
						writeString(this.Budget, dos, oos);
					
						writeString(this.Runtime, dos, oos);
					
					writeInteger(this.CVotes10, dos, oos);
					
					writeInteger(this.CVotes09, dos, oos);
					
					writeInteger(this.CVotes08, dos, oos);
					
					writeInteger(this.CVotes07, dos, oos);
					
					writeInteger(this.CVotes06, dos, oos);
					
					writeInteger(this.CVotes05, dos, oos);
					
					writeInteger(this.CVotes04, dos, oos);
					
					writeInteger(this.CVotes03, dos, oos);
					
					writeInteger(this.CVotes02, dos, oos);
					
					writeInteger(this.CVotes01, dos, oos);
					
					writeInteger(this.CVotesMale, dos, oos);
					
					writeInteger(this.CVotesFemale, dos, oos);
					
					writeInteger(this.CVotesU18, dos, oos);
					
					writeInteger(this.CVotesU18M, dos, oos);
					
					writeInteger(this.CVotesU18F, dos, oos);
					
					writeInteger(this.CVotes1829, dos, oos);
					
					writeInteger(this.CVotes1829M, dos, oos);
					
					writeInteger(this.CVotes1829F, dos, oos);
					
					writeInteger(this.CVotes3044, dos, oos);
					
					writeInteger(this.CVotes3044M, dos, oos);
					
					writeInteger(this.CVotes3044F, dos, oos);
					
					writeInteger(this.CVotes45A, dos, oos);
					
					writeInteger(this.CVotes45AM, dos, oos);
					
					writeInteger(this.CVotes45AF, dos, oos);
					
					writeInteger(this.CVotes1000, dos, oos);
					
					writeInteger(this.CVotesUS, dos, oos);
					
						writeString(this.CVotesnUS, dos, oos);
					
						if(this.VotesM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesM);
		            	}
					
						if(this.VotesF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesF);
		            	}
					
						if(this.VotesU18 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18);
		            	}
					
						if(this.VotesU18M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18M);
		            	}
					
						if(this.VotesU18F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesU18F);
		            	}
					
						if(this.Votes1829 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829);
		            	}
					
						if(this.Votes1829M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829M);
		            	}
					
						if(this.Votes1829F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1829F);
		            	}
					
						if(this.Votes3044 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044);
		            	}
					
						if(this.Votes3044M == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044M);
		            	}
					
						if(this.Votes3044F == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes3044F);
		            	}
					
						if(this.Votes45A == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45A);
		            	}
					
						if(this.Votes45AM == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AM);
		            	}
					
						if(this.Votes45AF == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes45AF);
		            	}
					
						if(this.VotesIMDB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesIMDB);
		            	}
					
						if(this.Votes1000 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Votes1000);
		            	}
					
						if(this.VotesUS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.VotesUS);
		            	}
					
						writeString(this.VotesnUS, dos, oos);
					
						writeString(this.Domestic, dos, oos);
					
						writeString(this.Foreign, dos, oos);
					
						writeString(this.Worldwide, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.Title, dos, objectOut);
					
					writeInteger(this.TotalVotes, dos, objectOut);
					
						writeString(this.MetaCritic, dos, objectOut);
					
						writeString(this.Budget, dos, objectOut);
					
						writeString(this.Runtime, dos, objectOut);
					
					writeInteger(this.CVotes10, dos, objectOut);
					
					writeInteger(this.CVotes09, dos, objectOut);
					
					writeInteger(this.CVotes08, dos, objectOut);
					
					writeInteger(this.CVotes07, dos, objectOut);
					
					writeInteger(this.CVotes06, dos, objectOut);
					
					writeInteger(this.CVotes05, dos, objectOut);
					
					writeInteger(this.CVotes04, dos, objectOut);
					
					writeInteger(this.CVotes03, dos, objectOut);
					
					writeInteger(this.CVotes02, dos, objectOut);
					
					writeInteger(this.CVotes01, dos, objectOut);
					
					writeInteger(this.CVotesMale, dos, objectOut);
					
					writeInteger(this.CVotesFemale, dos, objectOut);
					
					writeInteger(this.CVotesU18, dos, objectOut);
					
					writeInteger(this.CVotesU18M, dos, objectOut);
					
					writeInteger(this.CVotesU18F, dos, objectOut);
					
					writeInteger(this.CVotes1829, dos, objectOut);
					
					writeInteger(this.CVotes1829M, dos, objectOut);
					
					writeInteger(this.CVotes1829F, dos, objectOut);
					
					writeInteger(this.CVotes3044, dos, objectOut);
					
					writeInteger(this.CVotes3044M, dos, objectOut);
					
					writeInteger(this.CVotes3044F, dos, objectOut);
					
					writeInteger(this.CVotes45A, dos, objectOut);
					
					writeInteger(this.CVotes45AM, dos, objectOut);
					
					writeInteger(this.CVotes45AF, dos, objectOut);
					
					writeInteger(this.CVotes1000, dos, objectOut);
					
					writeInteger(this.CVotesUS, dos, objectOut);
					
						writeString(this.CVotesnUS, dos, objectOut);
					
						if(this.VotesM == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.VotesM);
		            	}
					
						if(this.VotesF == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.VotesF);
		            	}
					
						if(this.VotesU18 == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.VotesU18);
		            	}
					
						if(this.VotesU18M == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.VotesU18M);
		            	}
					
						if(this.VotesU18F == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.VotesU18F);
		            	}
					
						if(this.Votes1829 == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Votes1829);
		            	}
					
						if(this.Votes1829M == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Votes1829M);
		            	}
					
						if(this.Votes1829F == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Votes1829F);
		            	}
					
						if(this.Votes3044 == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Votes3044);
		            	}
					
						if(this.Votes3044M == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Votes3044M);
		            	}
					
						if(this.Votes3044F == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Votes3044F);
		            	}
					
						if(this.Votes45A == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Votes45A);
		            	}
					
						if(this.Votes45AM == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Votes45AM);
		            	}
					
						if(this.Votes45AF == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Votes45AF);
		            	}
					
						if(this.VotesIMDB == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.VotesIMDB);
		            	}
					
						if(this.Votes1000 == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Votes1000);
		            	}
					
						if(this.VotesUS == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.VotesUS);
		            	}
					
						writeString(this.VotesnUS, dos, objectOut);
					
						writeString(this.Domestic, dos, objectOut);
					
						writeString(this.Foreign, dos, objectOut);
					
						writeString(this.Worldwide, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("X="+String.valueOf(X));
		sb.append(",Title="+Title);
		sb.append(",TotalVotes="+String.valueOf(TotalVotes));
		sb.append(",MetaCritic="+MetaCritic);
		sb.append(",Budget="+Budget);
		sb.append(",Runtime="+Runtime);
		sb.append(",CVotes10="+String.valueOf(CVotes10));
		sb.append(",CVotes09="+String.valueOf(CVotes09));
		sb.append(",CVotes08="+String.valueOf(CVotes08));
		sb.append(",CVotes07="+String.valueOf(CVotes07));
		sb.append(",CVotes06="+String.valueOf(CVotes06));
		sb.append(",CVotes05="+String.valueOf(CVotes05));
		sb.append(",CVotes04="+String.valueOf(CVotes04));
		sb.append(",CVotes03="+String.valueOf(CVotes03));
		sb.append(",CVotes02="+String.valueOf(CVotes02));
		sb.append(",CVotes01="+String.valueOf(CVotes01));
		sb.append(",CVotesMale="+String.valueOf(CVotesMale));
		sb.append(",CVotesFemale="+String.valueOf(CVotesFemale));
		sb.append(",CVotesU18="+String.valueOf(CVotesU18));
		sb.append(",CVotesU18M="+String.valueOf(CVotesU18M));
		sb.append(",CVotesU18F="+String.valueOf(CVotesU18F));
		sb.append(",CVotes1829="+String.valueOf(CVotes1829));
		sb.append(",CVotes1829M="+String.valueOf(CVotes1829M));
		sb.append(",CVotes1829F="+String.valueOf(CVotes1829F));
		sb.append(",CVotes3044="+String.valueOf(CVotes3044));
		sb.append(",CVotes3044M="+String.valueOf(CVotes3044M));
		sb.append(",CVotes3044F="+String.valueOf(CVotes3044F));
		sb.append(",CVotes45A="+String.valueOf(CVotes45A));
		sb.append(",CVotes45AM="+String.valueOf(CVotes45AM));
		sb.append(",CVotes45AF="+String.valueOf(CVotes45AF));
		sb.append(",CVotes1000="+String.valueOf(CVotes1000));
		sb.append(",CVotesUS="+String.valueOf(CVotesUS));
		sb.append(",CVotesnUS="+CVotesnUS);
		sb.append(",VotesM="+String.valueOf(VotesM));
		sb.append(",VotesF="+String.valueOf(VotesF));
		sb.append(",VotesU18="+String.valueOf(VotesU18));
		sb.append(",VotesU18M="+String.valueOf(VotesU18M));
		sb.append(",VotesU18F="+String.valueOf(VotesU18F));
		sb.append(",Votes1829="+String.valueOf(Votes1829));
		sb.append(",Votes1829M="+String.valueOf(Votes1829M));
		sb.append(",Votes1829F="+String.valueOf(Votes1829F));
		sb.append(",Votes3044="+String.valueOf(Votes3044));
		sb.append(",Votes3044M="+String.valueOf(Votes3044M));
		sb.append(",Votes3044F="+String.valueOf(Votes3044F));
		sb.append(",Votes45A="+String.valueOf(Votes45A));
		sb.append(",Votes45AM="+String.valueOf(Votes45AM));
		sb.append(",Votes45AF="+String.valueOf(Votes45AF));
		sb.append(",VotesIMDB="+String.valueOf(VotesIMDB));
		sb.append(",Votes1000="+String.valueOf(Votes1000));
		sb.append(",VotesUS="+String.valueOf(VotesUS));
		sb.append(",VotesnUS="+VotesnUS);
		sb.append(",Domestic="+Domestic);
		sb.append(",Foreign="+Foreign);
		sb.append(",Worldwide="+Worldwide);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.X, other.X);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputJSON_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tFileInputJSON_1 - inputs:(after_tFileInputDelimited_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3) outputs:(out1,out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tFileInputJSON_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputJSON_1", false);
		start_Hash.put("tFileInputJSON_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputJSON_1";

	
		int tos_count_tFileInputJSON_1 = 0;
		

	
class JsonPathCache_tFileInputJSON_1 {
	final java.util.Map<String,com.jayway.jsonpath.JsonPath> jsonPathString2compiledJsonPath = new java.util.HashMap<String,com.jayway.jsonpath.JsonPath>();
	
	public com.jayway.jsonpath.JsonPath getCompiledJsonPath(String jsonPath) {
		if(jsonPathString2compiledJsonPath.containsKey(jsonPath)) {
			return jsonPathString2compiledJsonPath.get(jsonPath);
		} else {
			com.jayway.jsonpath.JsonPath compiledLoopPath = com.jayway.jsonpath.JsonPath.compile(jsonPath);
			jsonPathString2compiledJsonPath.put(jsonPath,compiledLoopPath);
			return compiledLoopPath;
		}
	}
}

int nb_line_tFileInputJSON_1 = 0;

JsonPathCache_tFileInputJSON_1 jsonPathCache_tFileInputJSON_1 = new JsonPathCache_tFileInputJSON_1();

String loopPath_tFileInputJSON_1 = "$[*]";
java.util.List<Object> resultset_tFileInputJSON_1 = new java.util.ArrayList<Object>();

java.io.InputStream is_tFileInputJSON_1 = null;
com.jayway.jsonpath.ParseContext parseContext_tFileInputJSON_1 = com.jayway.jsonpath.JsonPath.using(com.jayway.jsonpath.Configuration.defaultConfiguration());
Object filenameOrStream_tFileInputJSON_1 = null;
        try {
            filenameOrStream_tFileInputJSON_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/IMDB.json";
        } catch(java.lang.Exception e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
				
	            globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
	            System.err.println(e_tFileInputJSON_1.getMessage());
        }
        
com.jayway.jsonpath.ReadContext document_tFileInputJSON_1 = null;
try {
     if(filenameOrStream_tFileInputJSON_1 instanceof java.io.InputStream){
         is_tFileInputJSON_1 = (java.io.InputStream)filenameOrStream_tFileInputJSON_1;
     }else{
	    
	        is_tFileInputJSON_1 = new java.io.FileInputStream((String)filenameOrStream_tFileInputJSON_1);
	    
	 }
	
	
	document_tFileInputJSON_1 = parseContext_tFileInputJSON_1.parse(is_tFileInputJSON_1,"UTF-8");
	com.jayway.jsonpath.JsonPath compiledLoopPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(loopPath_tFileInputJSON_1);
	Object result_tFileInputJSON_1 = document_tFileInputJSON_1.read(compiledLoopPath_tFileInputJSON_1,net.minidev.json.JSONObject.class);
	if (result_tFileInputJSON_1 instanceof net.minidev.json.JSONArray) {
		resultset_tFileInputJSON_1 = (net.minidev.json.JSONArray) result_tFileInputJSON_1;
	} else {
		resultset_tFileInputJSON_1.add(result_tFileInputJSON_1);
	}
} catch (java.lang.Exception e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
	globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
	System.err.println(e_tFileInputJSON_1.getMessage());
} finally {
	if(is_tFileInputJSON_1 != null) {
		is_tFileInputJSON_1.close();
	}
}

String jsonPath_tFileInputJSON_1 = null;
com.jayway.jsonpath.JsonPath compiledJsonPath_tFileInputJSON_1 = null;

Object value_tFileInputJSON_1 = null;
Object root_tFileInputJSON_1 = null;
for(Object row_tFileInputJSON_1 : resultset_tFileInputJSON_1) {
	nb_line_tFileInputJSON_1++;
			row2 = null;			
			row2 = null;			
	boolean whetherReject_tFileInputJSON_1 = false;
	row2 = new row2Struct();
	
	try{
				jsonPath_tFileInputJSON_1 = "X";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.X = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.X = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.X = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Title";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Title = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Title = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "TotalVotes";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.TotalVotes = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.TotalVotes = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.TotalVotes = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "MetaCritic";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.MetaCritic = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.MetaCritic = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Budget";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Budget = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Budget = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Runtime";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Runtime = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Runtime = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes10";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes10 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes10 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes10 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes09";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes09 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes09 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes09 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes08";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes08 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes08 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes08 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes07";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes07 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes07 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes07 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes06";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes06 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes06 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes06 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes05";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes05 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes05 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes05 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes04";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes04 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes04 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes04 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes03";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes03 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes03 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes03 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes02";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes02 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes02 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes02 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes01";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes01 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes01 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes01 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotesMale";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotesMale = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotesMale = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotesMale = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotesFemale";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotesFemale = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotesFemale = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotesFemale = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotesU18";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotesU18 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotesU18 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotesU18 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotesU18M";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotesU18M = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotesU18M = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotesU18M = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotesU18F";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotesU18F = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotesU18F = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotesU18F = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes1829";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes1829 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes1829 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes1829 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes1829M";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes1829M = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes1829M = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes1829M = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes1829F";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes1829F = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes1829F = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes1829F = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes3044";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes3044 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes3044 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes3044 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes3044M";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes3044M = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes3044M = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes3044M = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes3044F";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes3044F = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes3044F = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes3044F = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes45A";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes45A = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes45A = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes45A = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes45AM";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes45AM = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes45AM = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes45AM = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes45AF";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes45AF = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes45AF = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes45AF = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotes1000";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotes1000 = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotes1000 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotes1000 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotesUS";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.CVotesUS = ParserUtils.parseTo_Integer(value_tFileInputJSON_1.toString());
						} else {
							row2.CVotesUS = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotesUS = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "CVotesnUS";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.CVotesnUS = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.CVotesnUS = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "VotesM";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.VotesM = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.VotesM = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.VotesM = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "VotesF";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.VotesF = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.VotesF = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.VotesF = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "VotesU18";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.VotesU18 = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.VotesU18 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.VotesU18 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "VotesU18M";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.VotesU18M = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.VotesU18M = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.VotesU18M = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "VotesU18F";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.VotesU18F = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.VotesU18F = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.VotesU18F = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Votes1829";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Votes1829 = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Votes1829 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Votes1829 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Votes1829M";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Votes1829M = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Votes1829M = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Votes1829M = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Votes1829F";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Votes1829F = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Votes1829F = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Votes1829F = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Votes3044";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Votes3044 = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Votes3044 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Votes3044 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Votes3044M";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Votes3044M = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Votes3044M = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Votes3044M = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Votes3044F";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Votes3044F = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Votes3044F = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Votes3044F = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Votes45A";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Votes45A = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Votes45A = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Votes45A = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Votes45AM";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Votes45AM = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Votes45AM = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Votes45AM = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Votes45AF";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Votes45AF = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Votes45AF = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Votes45AF = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "VotesIMDB";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.VotesIMDB = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.VotesIMDB = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.VotesIMDB = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Votes1000";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.Votes1000 = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.Votes1000 = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Votes1000 = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "VotesUS";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						if(value_tFileInputJSON_1 != null && !value_tFileInputJSON_1.toString().isEmpty()) {
						row2.VotesUS = ParserUtils.parseTo_Float(value_tFileInputJSON_1.toString());
						} else {
							row2.VotesUS = 

		null
;
						}
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.VotesUS = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "VotesnUS";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.VotesnUS = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.VotesnUS = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Domestic";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Domestic = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Domestic = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Foreign";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Foreign = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Foreign = 

		null
;
				}				
				jsonPath_tFileInputJSON_1 = "Worldwide";
				compiledJsonPath_tFileInputJSON_1 = jsonPathCache_tFileInputJSON_1.getCompiledJsonPath(jsonPath_tFileInputJSON_1);
				
				try {
				   
					    if(jsonPath_tFileInputJSON_1.startsWith("$")){
					        if(root_tFileInputJSON_1 == null){
					            root_tFileInputJSON_1 = document_tFileInputJSON_1.read(jsonPathCache_tFileInputJSON_1.getCompiledJsonPath("$"));
					        }
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(root_tFileInputJSON_1);
				       }else{
				           value_tFileInputJSON_1 = compiledJsonPath_tFileInputJSON_1.read(row_tFileInputJSON_1);
				       }
						row2.Worldwide = value_tFileInputJSON_1 == null ? 

		null
 : value_tFileInputJSON_1.toString();
				} catch (com.jayway.jsonpath.PathNotFoundException e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
					row2.Worldwide = 

		null
;
				}				
    } catch (java.lang.Exception e_tFileInputJSON_1) {
globalMap.put("tFileInputJSON_1_ERROR_MESSAGE",e_tFileInputJSON_1.getMessage());
        whetherReject_tFileInputJSON_1 = true;
                System.err.println(e_tFileInputJSON_1.getMessage());
                row2 = null;
            globalMap.put("tFileInputJSON_1_ERROR_MESSAGE", e_tFileInputJSON_1.getMessage());
    }
//}

 



/**
 * [tFileInputJSON_1 begin ] stop
 */
	
	/**
	 * [tFileInputJSON_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 


	tos_count_tFileInputJSON_1++;

/**
 * [tFileInputJSON_1 main ] stop
 */
	
	/**
	 * [tFileInputJSON_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.X = row2.X;
				
				row2_HashRow.Title = row2.Title;
				
				row2_HashRow.TotalVotes = row2.TotalVotes;
				
				row2_HashRow.MetaCritic = row2.MetaCritic;
				
				row2_HashRow.Budget = row2.Budget;
				
				row2_HashRow.Runtime = row2.Runtime;
				
				row2_HashRow.CVotes10 = row2.CVotes10;
				
				row2_HashRow.CVotes09 = row2.CVotes09;
				
				row2_HashRow.CVotes08 = row2.CVotes08;
				
				row2_HashRow.CVotes07 = row2.CVotes07;
				
				row2_HashRow.CVotes06 = row2.CVotes06;
				
				row2_HashRow.CVotes05 = row2.CVotes05;
				
				row2_HashRow.CVotes04 = row2.CVotes04;
				
				row2_HashRow.CVotes03 = row2.CVotes03;
				
				row2_HashRow.CVotes02 = row2.CVotes02;
				
				row2_HashRow.CVotes01 = row2.CVotes01;
				
				row2_HashRow.CVotesMale = row2.CVotesMale;
				
				row2_HashRow.CVotesFemale = row2.CVotesFemale;
				
				row2_HashRow.CVotesU18 = row2.CVotesU18;
				
				row2_HashRow.CVotesU18M = row2.CVotesU18M;
				
				row2_HashRow.CVotesU18F = row2.CVotesU18F;
				
				row2_HashRow.CVotes1829 = row2.CVotes1829;
				
				row2_HashRow.CVotes1829M = row2.CVotes1829M;
				
				row2_HashRow.CVotes1829F = row2.CVotes1829F;
				
				row2_HashRow.CVotes3044 = row2.CVotes3044;
				
				row2_HashRow.CVotes3044M = row2.CVotes3044M;
				
				row2_HashRow.CVotes3044F = row2.CVotes3044F;
				
				row2_HashRow.CVotes45A = row2.CVotes45A;
				
				row2_HashRow.CVotes45AM = row2.CVotes45AM;
				
				row2_HashRow.CVotes45AF = row2.CVotes45AF;
				
				row2_HashRow.CVotes1000 = row2.CVotes1000;
				
				row2_HashRow.CVotesUS = row2.CVotesUS;
				
				row2_HashRow.CVotesnUS = row2.CVotesnUS;
				
				row2_HashRow.VotesM = row2.VotesM;
				
				row2_HashRow.VotesF = row2.VotesF;
				
				row2_HashRow.VotesU18 = row2.VotesU18;
				
				row2_HashRow.VotesU18M = row2.VotesU18M;
				
				row2_HashRow.VotesU18F = row2.VotesU18F;
				
				row2_HashRow.Votes1829 = row2.Votes1829;
				
				row2_HashRow.Votes1829M = row2.Votes1829M;
				
				row2_HashRow.Votes1829F = row2.Votes1829F;
				
				row2_HashRow.Votes3044 = row2.Votes3044;
				
				row2_HashRow.Votes3044M = row2.Votes3044M;
				
				row2_HashRow.Votes3044F = row2.Votes3044F;
				
				row2_HashRow.Votes45A = row2.Votes45A;
				
				row2_HashRow.Votes45AM = row2.Votes45AM;
				
				row2_HashRow.Votes45AF = row2.Votes45AF;
				
				row2_HashRow.VotesIMDB = row2.VotesIMDB;
				
				row2_HashRow.Votes1000 = row2.Votes1000;
				
				row2_HashRow.VotesUS = row2.VotesUS;
				
				row2_HashRow.VotesnUS = row2.VotesnUS;
				
				row2_HashRow.Domestic = row2.Domestic;
				
				row2_HashRow.Foreign = row2.Foreign;
				
				row2_HashRow.Worldwide = row2.Worldwide;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFileInputJSON_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputJSON_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

	}
	globalMap.put("tFileInputJSON_1_NB_LINE",nb_line_tFileInputJSON_1);
 

ok_Hash.put("tFileInputJSON_1", true);
end_Hash.put("tFileInputJSON_1", System.currentTimeMillis());




/**
 * [tFileInputJSON_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputJSON_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputJSON_1";

	

 



/**
 * [tFileInputJSON_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputJSON_1_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_TAL1_imdb = new byte[0];
    static byte[] commonByteArray_TAL1_imdb = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer X;

				public Integer getX () {
					return this.X;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public Float Rating;

				public Float getRating () {
					return this.Rating;
				}
				
			    public String Genre1;

				public String getGenre1 () {
					return this.Genre1;
				}
				
			    public String Genre2;

				public String getGenre2 () {
					return this.Genre2;
				}
				
			    public String Genre3;

				public String getGenre3 () {
					return this.Genre3;
				}
				
			    public String MetaCritic;

				public String getMetaCritic () {
					return this.MetaCritic;
				}
				
			    public String Runtime;

				public String getRuntime () {
					return this.Runtime;
				}
				
			    public Integer CVotes10;

				public Integer getCVotes10 () {
					return this.CVotes10;
				}
				
			    public Integer CVotes09;

				public Integer getCVotes09 () {
					return this.CVotes09;
				}
				
			    public Integer CVotes08;

				public Integer getCVotes08 () {
					return this.CVotes08;
				}
				
			    public Integer CVotes07;

				public Integer getCVotes07 () {
					return this.CVotes07;
				}
				
			    public Integer CVotes06;

				public Integer getCVotes06 () {
					return this.CVotes06;
				}
				
			    public Integer CVotes05;

				public Integer getCVotes05 () {
					return this.CVotes05;
				}
				
			    public Integer CVotes04;

				public Integer getCVotes04 () {
					return this.CVotes04;
				}
				
			    public Integer CVotes03;

				public Integer getCVotes03 () {
					return this.CVotes03;
				}
				
			    public Integer CVotes02;

				public Integer getCVotes02 () {
					return this.CVotes02;
				}
				
			    public Integer CVotes01;

				public Integer getCVotes01 () {
					return this.CVotes01;
				}
				
			    public Integer CVotesMale;

				public Integer getCVotesMale () {
					return this.CVotesMale;
				}
				
			    public Integer CVotesFemale;

				public Integer getCVotesFemale () {
					return this.CVotesFemale;
				}
				
			    public Integer CVotesU18;

				public Integer getCVotesU18 () {
					return this.CVotesU18;
				}
				
			    public Integer CVotesU18M;

				public Integer getCVotesU18M () {
					return this.CVotesU18M;
				}
				
			    public Integer CVotesU18F;

				public Integer getCVotesU18F () {
					return this.CVotesU18F;
				}
				
			    public Integer CVotes1829;

				public Integer getCVotes1829 () {
					return this.CVotes1829;
				}
				
			    public Integer CVotes1829M;

				public Integer getCVotes1829M () {
					return this.CVotes1829M;
				}
				
			    public Integer CVotes1829F;

				public Integer getCVotes1829F () {
					return this.CVotes1829F;
				}
				
			    public Integer CVotes3044;

				public Integer getCVotes3044 () {
					return this.CVotes3044;
				}
				
			    public Integer CVotes3044M;

				public Integer getCVotes3044M () {
					return this.CVotes3044M;
				}
				
			    public Integer CVotes3044F;

				public Integer getCVotes3044F () {
					return this.CVotes3044F;
				}
				
			    public Integer CVotes45A;

				public Integer getCVotes45A () {
					return this.CVotes45A;
				}
				
			    public Integer CVotes45AM;

				public Integer getCVotes45AM () {
					return this.CVotes45AM;
				}
				
			    public Integer CVotes45AF;

				public Integer getCVotes45AF () {
					return this.CVotes45AF;
				}
				
			    public Integer CVotes1000;

				public Integer getCVotes1000 () {
					return this.CVotes1000;
				}
				
			    public Integer CVotesUS;

				public Integer getCVotesUS () {
					return this.CVotesUS;
				}
				
			    public Integer CVotesnUS;

				public Integer getCVotesnUS () {
					return this.CVotesnUS;
				}
				
			    public String Domestic;

				public String getDomestic () {
					return this.Domestic;
				}
				
			    public String Foreign;

				public String getForeign () {
					return this.Foreign;
				}
				
			    public String Worldwide;

				public String getWorldwide () {
					return this.Worldwide;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.X == null) ? 0 : this.X.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.X == null) {
							if (other.X != null)
								return false;
						
						} else if (!this.X.equals(other.X))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.X = this.X;
	            other.Title = this.Title;
	            other.Rating = this.Rating;
	            other.Genre1 = this.Genre1;
	            other.Genre2 = this.Genre2;
	            other.Genre3 = this.Genre3;
	            other.MetaCritic = this.MetaCritic;
	            other.Runtime = this.Runtime;
	            other.CVotes10 = this.CVotes10;
	            other.CVotes09 = this.CVotes09;
	            other.CVotes08 = this.CVotes08;
	            other.CVotes07 = this.CVotes07;
	            other.CVotes06 = this.CVotes06;
	            other.CVotes05 = this.CVotes05;
	            other.CVotes04 = this.CVotes04;
	            other.CVotes03 = this.CVotes03;
	            other.CVotes02 = this.CVotes02;
	            other.CVotes01 = this.CVotes01;
	            other.CVotesMale = this.CVotesMale;
	            other.CVotesFemale = this.CVotesFemale;
	            other.CVotesU18 = this.CVotesU18;
	            other.CVotesU18M = this.CVotesU18M;
	            other.CVotesU18F = this.CVotesU18F;
	            other.CVotes1829 = this.CVotes1829;
	            other.CVotes1829M = this.CVotes1829M;
	            other.CVotes1829F = this.CVotes1829F;
	            other.CVotes3044 = this.CVotes3044;
	            other.CVotes3044M = this.CVotes3044M;
	            other.CVotes3044F = this.CVotes3044F;
	            other.CVotes45A = this.CVotes45A;
	            other.CVotes45AM = this.CVotes45AM;
	            other.CVotes45AF = this.CVotes45AF;
	            other.CVotes1000 = this.CVotes1000;
	            other.CVotesUS = this.CVotesUS;
	            other.CVotesnUS = this.CVotesnUS;
	            other.Domestic = this.Domestic;
	            other.Foreign = this.Foreign;
	            other.Worldwide = this.Worldwide;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.X = this.X;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_TAL1_imdb) {

        	try {

        		int length = 0;
		
						this.X = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.X,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Title = readString(dis,ois);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Rating = null;
           				} else {
           			    	this.Rating = dis.readFloat();
           				}
					
						this.Genre1 = readString(dis,ois);
					
						this.Genre2 = readString(dis,ois);
					
						this.Genre3 = readString(dis,ois);
					
						this.MetaCritic = readString(dis,ois);
					
						this.Runtime = readString(dis,ois);
					
						this.CVotes10 = readInteger(dis,ois);
					
						this.CVotes09 = readInteger(dis,ois);
					
						this.CVotes08 = readInteger(dis,ois);
					
						this.CVotes07 = readInteger(dis,ois);
					
						this.CVotes06 = readInteger(dis,ois);
					
						this.CVotes05 = readInteger(dis,ois);
					
						this.CVotes04 = readInteger(dis,ois);
					
						this.CVotes03 = readInteger(dis,ois);
					
						this.CVotes02 = readInteger(dis,ois);
					
						this.CVotes01 = readInteger(dis,ois);
					
						this.CVotesMale = readInteger(dis,ois);
					
						this.CVotesFemale = readInteger(dis,ois);
					
						this.CVotesU18 = readInteger(dis,ois);
					
						this.CVotesU18M = readInteger(dis,ois);
					
						this.CVotesU18F = readInteger(dis,ois);
					
						this.CVotes1829 = readInteger(dis,ois);
					
						this.CVotes1829M = readInteger(dis,ois);
					
						this.CVotes1829F = readInteger(dis,ois);
					
						this.CVotes3044 = readInteger(dis,ois);
					
						this.CVotes3044M = readInteger(dis,ois);
					
						this.CVotes3044F = readInteger(dis,ois);
					
						this.CVotes45A = readInteger(dis,ois);
					
						this.CVotes45AM = readInteger(dis,ois);
					
						this.CVotes45AF = readInteger(dis,ois);
					
						this.CVotes1000 = readInteger(dis,ois);
					
						this.CVotesUS = readInteger(dis,ois);
					
						this.CVotesnUS = readInteger(dis,ois);
					
						this.Domestic = readString(dis,ois);
					
						this.Foreign = readString(dis,ois);
					
						this.Worldwide = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.Title = readString(dis,objectIn);
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.Rating = null;
           				} else {
           			    	this.Rating = objectIn.readFloat();
           				}
					
						this.Genre1 = readString(dis,objectIn);
					
						this.Genre2 = readString(dis,objectIn);
					
						this.Genre3 = readString(dis,objectIn);
					
						this.MetaCritic = readString(dis,objectIn);
					
						this.Runtime = readString(dis,objectIn);
					
						this.CVotes10 = readInteger(dis,objectIn);
					
						this.CVotes09 = readInteger(dis,objectIn);
					
						this.CVotes08 = readInteger(dis,objectIn);
					
						this.CVotes07 = readInteger(dis,objectIn);
					
						this.CVotes06 = readInteger(dis,objectIn);
					
						this.CVotes05 = readInteger(dis,objectIn);
					
						this.CVotes04 = readInteger(dis,objectIn);
					
						this.CVotes03 = readInteger(dis,objectIn);
					
						this.CVotes02 = readInteger(dis,objectIn);
					
						this.CVotes01 = readInteger(dis,objectIn);
					
						this.CVotesMale = readInteger(dis,objectIn);
					
						this.CVotesFemale = readInteger(dis,objectIn);
					
						this.CVotesU18 = readInteger(dis,objectIn);
					
						this.CVotesU18M = readInteger(dis,objectIn);
					
						this.CVotesU18F = readInteger(dis,objectIn);
					
						this.CVotes1829 = readInteger(dis,objectIn);
					
						this.CVotes1829M = readInteger(dis,objectIn);
					
						this.CVotes1829F = readInteger(dis,objectIn);
					
						this.CVotes3044 = readInteger(dis,objectIn);
					
						this.CVotes3044M = readInteger(dis,objectIn);
					
						this.CVotes3044F = readInteger(dis,objectIn);
					
						this.CVotes45A = readInteger(dis,objectIn);
					
						this.CVotes45AM = readInteger(dis,objectIn);
					
						this.CVotes45AF = readInteger(dis,objectIn);
					
						this.CVotes1000 = readInteger(dis,objectIn);
					
						this.CVotesUS = readInteger(dis,objectIn);
					
						this.CVotesnUS = readInteger(dis,objectIn);
					
						this.Domestic = readString(dis,objectIn);
					
						this.Foreign = readString(dis,objectIn);
					
						this.Worldwide = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Title, dos, oos);
					
						if(this.Rating == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Rating);
		            	}
					
						writeString(this.Genre1, dos, oos);
					
						writeString(this.Genre2, dos, oos);
					
						writeString(this.Genre3, dos, oos);
					
						writeString(this.MetaCritic, dos, oos);
					
						writeString(this.Runtime, dos, oos);
					
					writeInteger(this.CVotes10, dos, oos);
					
					writeInteger(this.CVotes09, dos, oos);
					
					writeInteger(this.CVotes08, dos, oos);
					
					writeInteger(this.CVotes07, dos, oos);
					
					writeInteger(this.CVotes06, dos, oos);
					
					writeInteger(this.CVotes05, dos, oos);
					
					writeInteger(this.CVotes04, dos, oos);
					
					writeInteger(this.CVotes03, dos, oos);
					
					writeInteger(this.CVotes02, dos, oos);
					
					writeInteger(this.CVotes01, dos, oos);
					
					writeInteger(this.CVotesMale, dos, oos);
					
					writeInteger(this.CVotesFemale, dos, oos);
					
					writeInteger(this.CVotesU18, dos, oos);
					
					writeInteger(this.CVotesU18M, dos, oos);
					
					writeInteger(this.CVotesU18F, dos, oos);
					
					writeInteger(this.CVotes1829, dos, oos);
					
					writeInteger(this.CVotes1829M, dos, oos);
					
					writeInteger(this.CVotes1829F, dos, oos);
					
					writeInteger(this.CVotes3044, dos, oos);
					
					writeInteger(this.CVotes3044M, dos, oos);
					
					writeInteger(this.CVotes3044F, dos, oos);
					
					writeInteger(this.CVotes45A, dos, oos);
					
					writeInteger(this.CVotes45AM, dos, oos);
					
					writeInteger(this.CVotes45AF, dos, oos);
					
					writeInteger(this.CVotes1000, dos, oos);
					
					writeInteger(this.CVotesUS, dos, oos);
					
					writeInteger(this.CVotesnUS, dos, oos);
					
						writeString(this.Domestic, dos, oos);
					
						writeString(this.Foreign, dos, oos);
					
						writeString(this.Worldwide, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.Title, dos, objectOut);
					
						if(this.Rating == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeFloat(this.Rating);
		            	}
					
						writeString(this.Genre1, dos, objectOut);
					
						writeString(this.Genre2, dos, objectOut);
					
						writeString(this.Genre3, dos, objectOut);
					
						writeString(this.MetaCritic, dos, objectOut);
					
						writeString(this.Runtime, dos, objectOut);
					
					writeInteger(this.CVotes10, dos, objectOut);
					
					writeInteger(this.CVotes09, dos, objectOut);
					
					writeInteger(this.CVotes08, dos, objectOut);
					
					writeInteger(this.CVotes07, dos, objectOut);
					
					writeInteger(this.CVotes06, dos, objectOut);
					
					writeInteger(this.CVotes05, dos, objectOut);
					
					writeInteger(this.CVotes04, dos, objectOut);
					
					writeInteger(this.CVotes03, dos, objectOut);
					
					writeInteger(this.CVotes02, dos, objectOut);
					
					writeInteger(this.CVotes01, dos, objectOut);
					
					writeInteger(this.CVotesMale, dos, objectOut);
					
					writeInteger(this.CVotesFemale, dos, objectOut);
					
					writeInteger(this.CVotesU18, dos, objectOut);
					
					writeInteger(this.CVotesU18M, dos, objectOut);
					
					writeInteger(this.CVotesU18F, dos, objectOut);
					
					writeInteger(this.CVotes1829, dos, objectOut);
					
					writeInteger(this.CVotes1829M, dos, objectOut);
					
					writeInteger(this.CVotes1829F, dos, objectOut);
					
					writeInteger(this.CVotes3044, dos, objectOut);
					
					writeInteger(this.CVotes3044M, dos, objectOut);
					
					writeInteger(this.CVotes3044F, dos, objectOut);
					
					writeInteger(this.CVotes45A, dos, objectOut);
					
					writeInteger(this.CVotes45AM, dos, objectOut);
					
					writeInteger(this.CVotes45AF, dos, objectOut);
					
					writeInteger(this.CVotes1000, dos, objectOut);
					
					writeInteger(this.CVotesUS, dos, objectOut);
					
					writeInteger(this.CVotesnUS, dos, objectOut);
					
						writeString(this.Domestic, dos, objectOut);
					
						writeString(this.Foreign, dos, objectOut);
					
						writeString(this.Worldwide, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("X="+String.valueOf(X));
		sb.append(",Title="+Title);
		sb.append(",Rating="+String.valueOf(Rating));
		sb.append(",Genre1="+Genre1);
		sb.append(",Genre2="+Genre2);
		sb.append(",Genre3="+Genre3);
		sb.append(",MetaCritic="+MetaCritic);
		sb.append(",Runtime="+Runtime);
		sb.append(",CVotes10="+String.valueOf(CVotes10));
		sb.append(",CVotes09="+String.valueOf(CVotes09));
		sb.append(",CVotes08="+String.valueOf(CVotes08));
		sb.append(",CVotes07="+String.valueOf(CVotes07));
		sb.append(",CVotes06="+String.valueOf(CVotes06));
		sb.append(",CVotes05="+String.valueOf(CVotes05));
		sb.append(",CVotes04="+String.valueOf(CVotes04));
		sb.append(",CVotes03="+String.valueOf(CVotes03));
		sb.append(",CVotes02="+String.valueOf(CVotes02));
		sb.append(",CVotes01="+String.valueOf(CVotes01));
		sb.append(",CVotesMale="+String.valueOf(CVotesMale));
		sb.append(",CVotesFemale="+String.valueOf(CVotesFemale));
		sb.append(",CVotesU18="+String.valueOf(CVotesU18));
		sb.append(",CVotesU18M="+String.valueOf(CVotesU18M));
		sb.append(",CVotesU18F="+String.valueOf(CVotesU18F));
		sb.append(",CVotes1829="+String.valueOf(CVotes1829));
		sb.append(",CVotes1829M="+String.valueOf(CVotes1829M));
		sb.append(",CVotes1829F="+String.valueOf(CVotes1829F));
		sb.append(",CVotes3044="+String.valueOf(CVotes3044));
		sb.append(",CVotes3044M="+String.valueOf(CVotes3044M));
		sb.append(",CVotes3044F="+String.valueOf(CVotes3044F));
		sb.append(",CVotes45A="+String.valueOf(CVotes45A));
		sb.append(",CVotes45AM="+String.valueOf(CVotes45AM));
		sb.append(",CVotes45AF="+String.valueOf(CVotes45AF));
		sb.append(",CVotes1000="+String.valueOf(CVotes1000));
		sb.append(",CVotesUS="+String.valueOf(CVotesUS));
		sb.append(",CVotesnUS="+String.valueOf(CVotesnUS));
		sb.append(",Domestic="+Domestic);
		sb.append(",Foreign="+Foreign);
		sb.append(",Worldwide="+Worldwide);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.X, other.X);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputExcel_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tFileInputExcel_1 - inputs:(after_tFileInputDelimited_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2,row3) outputs:(out1,out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tFileInputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputExcel_1", false);
		start_Hash.put("tFileInputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputExcel_1";

	
		int tos_count_tFileInputExcel_1 = 0;
		

 
	final String decryptedPassword_tFileInputExcel_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:GMAnKaqaxcICmwnTYC3U3FZUuQ/XjJEe7/qqsQ==");
        String password_tFileInputExcel_1 = decryptedPassword_tFileInputExcel_1;
        if (password_tFileInputExcel_1.isEmpty()){
            password_tFileInputExcel_1 = null;
        }
			class RegexUtil_tFileInputExcel_1 {

		    	public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, String oneSheetName, boolean useRegex) {

			        java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();

			        if(useRegex){//this part process the regex issue

				        java.util.regex.Pattern pattern = java.util.regex.Pattern.compile(oneSheetName);
				        for (org.apache.poi.ss.usermodel.Sheet sheet : workbook) {
				            String sheetName = sheet.getSheetName();
				            java.util.regex.Matcher matcher = pattern.matcher(sheetName);
				            if (matcher.matches()) {
				            	if(sheet != null){
				                	list.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet);
				                }
				            }
				        }

			        }else{
			        	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheet(oneSheetName);
		            	if(sheet != null){
		                	list.add(sheet);
		                }

			        }

			        return list;
			    }

			    public java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> getSheets(org.apache.poi.xssf.usermodel.XSSFWorkbook workbook, int index, boolean useRegex) {
			    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> list =  new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
			    	org.apache.poi.xssf.usermodel.XSSFSheet sheet = (org.apache.poi.xssf.usermodel.XSSFSheet) workbook.getSheetAt(index);
	            	if(sheet != null){
	                	list.add(sheet);
	                }
			    	return list;
			    }

			}
		RegexUtil_tFileInputExcel_1 regexUtil_tFileInputExcel_1 = new RegexUtil_tFileInputExcel_1();

		Object source_tFileInputExcel_1 = "C:/Program Files (x86)/TOS_DI-8.0.1/studio/workspace/IMDB.xlsx";
		org.apache.poi.xssf.usermodel.XSSFWorkbook workbook_tFileInputExcel_1 = null;

		if(source_tFileInputExcel_1 instanceof String){
			workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create(new java.io.File((String)source_tFileInputExcel_1), password_tFileInputExcel_1, true);
		} else if(source_tFileInputExcel_1 instanceof java.io.InputStream) {
     		workbook_tFileInputExcel_1 = (org.apache.poi.xssf.usermodel.XSSFWorkbook) org.apache.poi.ss.usermodel.WorkbookFactory.create((java.io.InputStream)source_tFileInputExcel_1, password_tFileInputExcel_1);
		} else{
			workbook_tFileInputExcel_1 = null;
			throw new java.lang.Exception("The data source should be specified as Inputstream or File Path!");
		}
		try {

    	java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
    	for(org.apache.poi.ss.usermodel.Sheet sheet_tFileInputExcel_1 : workbook_tFileInputExcel_1){
   			sheetList_tFileInputExcel_1.add((org.apache.poi.xssf.usermodel.XSSFSheet) sheet_tFileInputExcel_1);
    	}
    	if(sheetList_tFileInputExcel_1.size() <= 0){
            throw new RuntimeException("Special sheets not exist!");
        }

		java.util.List<org.apache.poi.xssf.usermodel.XSSFSheet> sheetList_FilterNull_tFileInputExcel_1 = new java.util.ArrayList<org.apache.poi.xssf.usermodel.XSSFSheet>();
		for (org.apache.poi.xssf.usermodel.XSSFSheet sheet_FilterNull_tFileInputExcel_1 : sheetList_tFileInputExcel_1) {
			if(sheet_FilterNull_tFileInputExcel_1!=null && sheetList_FilterNull_tFileInputExcel_1.iterator()!=null && sheet_FilterNull_tFileInputExcel_1.iterator().hasNext()){
				sheetList_FilterNull_tFileInputExcel_1.add(sheet_FilterNull_tFileInputExcel_1);
			}
		}
		sheetList_tFileInputExcel_1 = sheetList_FilterNull_tFileInputExcel_1;
	if(sheetList_tFileInputExcel_1.size()>0){
		int nb_line_tFileInputExcel_1 = 0;

        int begin_line_tFileInputExcel_1 = 1;

        int footer_input_tFileInputExcel_1 = 0;

        int end_line_tFileInputExcel_1=0;
        for(org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1:sheetList_tFileInputExcel_1){
			end_line_tFileInputExcel_1+=(sheet_tFileInputExcel_1.getLastRowNum()+1);
        }
        end_line_tFileInputExcel_1 -= footer_input_tFileInputExcel_1;
        int limit_tFileInputExcel_1 = -1;
        int start_column_tFileInputExcel_1 = 1-1;
        int end_column_tFileInputExcel_1 = -1;

        org.apache.poi.xssf.usermodel.XSSFRow row_tFileInputExcel_1 = null;
        org.apache.poi.xssf.usermodel.XSSFSheet sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(0);
        int rowCount_tFileInputExcel_1 = 0;
        int sheetIndex_tFileInputExcel_1 = 0;
        int currentRows_tFileInputExcel_1 = (sheetList_tFileInputExcel_1.get(0).getLastRowNum()+1);

		//for the number format
        java.text.DecimalFormat df_tFileInputExcel_1 = new java.text.DecimalFormat("#.####################################");
        char decimalChar_tFileInputExcel_1 = df_tFileInputExcel_1.getDecimalFormatSymbols().getDecimalSeparator();
		
        for(int i_tFileInputExcel_1 = begin_line_tFileInputExcel_1; i_tFileInputExcel_1 < end_line_tFileInputExcel_1; i_tFileInputExcel_1++){

        	int emptyColumnCount_tFileInputExcel_1 = 0;

        	if (limit_tFileInputExcel_1 != -1 && nb_line_tFileInputExcel_1 >= limit_tFileInputExcel_1) {
        		break;
        	}

            while (i_tFileInputExcel_1 >= rowCount_tFileInputExcel_1 + currentRows_tFileInputExcel_1) {
                rowCount_tFileInputExcel_1 += currentRows_tFileInputExcel_1;
                sheet_tFileInputExcel_1 = sheetList_tFileInputExcel_1.get(++sheetIndex_tFileInputExcel_1);
                currentRows_tFileInputExcel_1 = (sheet_tFileInputExcel_1.getLastRowNum()+1);
            }
            globalMap.put("tFileInputExcel_1_CURRENT_SHEET",sheet_tFileInputExcel_1.getSheetName());
            if (rowCount_tFileInputExcel_1 <= i_tFileInputExcel_1) {
                row_tFileInputExcel_1 = sheet_tFileInputExcel_1.getRow(i_tFileInputExcel_1 - rowCount_tFileInputExcel_1);
            }
		    row3 = null;
		    row3 = null;
					int tempRowLength_tFileInputExcel_1 = 38;
				
				int columnIndex_tFileInputExcel_1 = 0;
			
			String[] temp_row_tFileInputExcel_1 = new String[tempRowLength_tFileInputExcel_1];
			int excel_end_column_tFileInputExcel_1;
			if(row_tFileInputExcel_1==null){
				excel_end_column_tFileInputExcel_1=0;
			}else{
				excel_end_column_tFileInputExcel_1=row_tFileInputExcel_1.getLastCellNum();
			}
			int actual_end_column_tFileInputExcel_1;
			if(end_column_tFileInputExcel_1 == -1){
				actual_end_column_tFileInputExcel_1 = excel_end_column_tFileInputExcel_1;
			}
			else{
				actual_end_column_tFileInputExcel_1 = end_column_tFileInputExcel_1 >	excel_end_column_tFileInputExcel_1 ? excel_end_column_tFileInputExcel_1 : end_column_tFileInputExcel_1;
			}
			org.apache.poi.ss.formula.eval.NumberEval ne_tFileInputExcel_1 = null;
			for(int i=0;i<tempRowLength_tFileInputExcel_1;i++){
				if(i + start_column_tFileInputExcel_1 < actual_end_column_tFileInputExcel_1){
					org.apache.poi.ss.usermodel.Cell cell_tFileInputExcel_1 = row_tFileInputExcel_1.getCell(i + start_column_tFileInputExcel_1);
					if(cell_tFileInputExcel_1!=null){
					switch (cell_tFileInputExcel_1.getCellType()) {
                        case STRING:
                            temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                            break;
                        case NUMERIC:
                            if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
									temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                            } else {
                                temp_row_tFileInputExcel_1[i] = df_tFileInputExcel_1.format(cell_tFileInputExcel_1.getNumericCellValue());
                            }
                            break;
                        case BOOLEAN:
                            temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                            break;
                        case FORMULA:
        					switch (cell_tFileInputExcel_1.getCachedFormulaResultType()) {
                                case STRING:
                                    temp_row_tFileInputExcel_1[i] = cell_tFileInputExcel_1.getRichStringCellValue().getString();
                                    break;
                                case NUMERIC:
                                    if (org.apache.poi.ss.usermodel.DateUtil.isCellDateFormatted(cell_tFileInputExcel_1)) {
											temp_row_tFileInputExcel_1[i] =cell_tFileInputExcel_1.getDateCellValue().toString();
                                    } else {
	                                    ne_tFileInputExcel_1 = new org.apache.poi.ss.formula.eval.NumberEval(cell_tFileInputExcel_1.getNumericCellValue());
										temp_row_tFileInputExcel_1[i] = ne_tFileInputExcel_1.getStringValue();
                                    }
                                    break;
                                case BOOLEAN:
                                    temp_row_tFileInputExcel_1[i] =String.valueOf(cell_tFileInputExcel_1.getBooleanCellValue());
                                    break;
                                default:
                            		temp_row_tFileInputExcel_1[i] = "";
                            }
                            break;
                        default:
                            temp_row_tFileInputExcel_1[i] = "";
                        }
                	}
                	else{
                		temp_row_tFileInputExcel_1[i]="";
                	}

				}else{
					temp_row_tFileInputExcel_1[i]="";
				}
			}
			boolean whetherReject_tFileInputExcel_1 = false;
			row3 = new row3Struct();
			int curColNum_tFileInputExcel_1 = -1;
			String curColName_tFileInputExcel_1 = "";
			try{
							columnIndex_tFileInputExcel_1 = 0;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "X";

				row3.X = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.X = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 1;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Title";

				row3.Title = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.Title = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 2;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Rating";

				row3.Rating = ParserUtils.parseTo_Float(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.Rating = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 3;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Genre1";

				row3.Genre1 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.Genre1 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 4;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Genre2";

				row3.Genre2 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.Genre2 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 5;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Genre3";

				row3.Genre3 = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.Genre3 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 6;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "MetaCritic";

				row3.MetaCritic = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.MetaCritic = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 7;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Runtime";

				row3.Runtime = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.Runtime = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 8;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes10";

				row3.CVotes10 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes10 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 9;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes09";

				row3.CVotes09 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes09 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 10;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes08";

				row3.CVotes08 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes08 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 11;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes07";

				row3.CVotes07 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes07 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 12;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes06";

				row3.CVotes06 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes06 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 13;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes05";

				row3.CVotes05 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes05 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 14;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes04";

				row3.CVotes04 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes04 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 15;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes03";

				row3.CVotes03 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes03 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 16;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes02";

				row3.CVotes02 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes02 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 17;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes01";

				row3.CVotes01 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes01 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 18;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotesMale";

				row3.CVotesMale = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotesMale = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 19;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotesFemale";

				row3.CVotesFemale = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotesFemale = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 20;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotesU18";

				row3.CVotesU18 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotesU18 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 21;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotesU18M";

				row3.CVotesU18M = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotesU18M = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 22;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotesU18F";

				row3.CVotesU18F = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotesU18F = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 23;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes1829";

				row3.CVotes1829 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes1829 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 24;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes1829M";

				row3.CVotes1829M = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes1829M = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 25;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes1829F";

				row3.CVotes1829F = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes1829F = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 26;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes3044";

				row3.CVotes3044 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes3044 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 27;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes3044M";

				row3.CVotes3044M = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes3044M = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 28;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes3044F";

				row3.CVotes3044F = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes3044F = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 29;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes45A";

				row3.CVotes45A = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes45A = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 30;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes45AM";

				row3.CVotes45AM = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes45AM = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 31;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes45AF";

				row3.CVotes45AF = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes45AF = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 32;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotes1000";

				row3.CVotes1000 = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotes1000 = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 33;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotesUS";

				row3.CVotesUS = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotesUS = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 34;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "CVotesnUS";

				row3.CVotesnUS = ParserUtils.parseTo_Integer(ParserUtils.parseTo_Number(temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1], null, '.'==decimalChar_tFileInputExcel_1 ? null : decimalChar_tFileInputExcel_1));
			}else{
				row3.CVotesnUS = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 35;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Domestic";

				row3.Domestic = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.Domestic = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 36;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Foreign";

				row3.Foreign = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.Foreign = null;
				emptyColumnCount_tFileInputExcel_1++;
			}
							columnIndex_tFileInputExcel_1 = 37;
						
			if( temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1].length() > 0) {
				curColNum_tFileInputExcel_1=columnIndex_tFileInputExcel_1 + start_column_tFileInputExcel_1 + 1;
				curColName_tFileInputExcel_1 = "Worldwide";

				row3.Worldwide = temp_row_tFileInputExcel_1[columnIndex_tFileInputExcel_1];
			}else{
				row3.Worldwide = null;
				emptyColumnCount_tFileInputExcel_1++;
			}

				nb_line_tFileInputExcel_1++;
				
			}catch(java.lang.Exception e){
globalMap.put("tFileInputExcel_1_ERROR_MESSAGE",e.getMessage());
			whetherReject_tFileInputExcel_1 = true;
					 System.err.println(e.getMessage());
					 row3 = null;
			}


		



 



/**
 * [tFileInputExcel_1 begin ] stop
 */
	
	/**
	 * [tFileInputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 


	tos_count_tFileInputExcel_1++;

/**
 * [tFileInputExcel_1 main ] stop
 */
	
	/**
	 * [tFileInputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.X = row3.X;
				
				row3_HashRow.Title = row3.Title;
				
				row3_HashRow.Rating = row3.Rating;
				
				row3_HashRow.Genre1 = row3.Genre1;
				
				row3_HashRow.Genre2 = row3.Genre2;
				
				row3_HashRow.Genre3 = row3.Genre3;
				
				row3_HashRow.MetaCritic = row3.MetaCritic;
				
				row3_HashRow.Runtime = row3.Runtime;
				
				row3_HashRow.CVotes10 = row3.CVotes10;
				
				row3_HashRow.CVotes09 = row3.CVotes09;
				
				row3_HashRow.CVotes08 = row3.CVotes08;
				
				row3_HashRow.CVotes07 = row3.CVotes07;
				
				row3_HashRow.CVotes06 = row3.CVotes06;
				
				row3_HashRow.CVotes05 = row3.CVotes05;
				
				row3_HashRow.CVotes04 = row3.CVotes04;
				
				row3_HashRow.CVotes03 = row3.CVotes03;
				
				row3_HashRow.CVotes02 = row3.CVotes02;
				
				row3_HashRow.CVotes01 = row3.CVotes01;
				
				row3_HashRow.CVotesMale = row3.CVotesMale;
				
				row3_HashRow.CVotesFemale = row3.CVotesFemale;
				
				row3_HashRow.CVotesU18 = row3.CVotesU18;
				
				row3_HashRow.CVotesU18M = row3.CVotesU18M;
				
				row3_HashRow.CVotesU18F = row3.CVotesU18F;
				
				row3_HashRow.CVotes1829 = row3.CVotes1829;
				
				row3_HashRow.CVotes1829M = row3.CVotes1829M;
				
				row3_HashRow.CVotes1829F = row3.CVotes1829F;
				
				row3_HashRow.CVotes3044 = row3.CVotes3044;
				
				row3_HashRow.CVotes3044M = row3.CVotes3044M;
				
				row3_HashRow.CVotes3044F = row3.CVotes3044F;
				
				row3_HashRow.CVotes45A = row3.CVotes45A;
				
				row3_HashRow.CVotes45AM = row3.CVotes45AM;
				
				row3_HashRow.CVotes45AF = row3.CVotes45AF;
				
				row3_HashRow.CVotes1000 = row3.CVotes1000;
				
				row3_HashRow.CVotesUS = row3.CVotesUS;
				
				row3_HashRow.CVotesnUS = row3.CVotesnUS;
				
				row3_HashRow.Domestic = row3.Domestic;
				
				row3_HashRow.Foreign = row3.Foreign;
				
				row3_HashRow.Worldwide = row3.Worldwide;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFileInputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

			}
			
			
			
			globalMap.put("tFileInputExcel_1_NB_LINE",nb_line_tFileInputExcel_1);
			
				}
			
		} finally { 
				
  				if(!(source_tFileInputExcel_1 instanceof java.io.InputStream)){
  					workbook_tFileInputExcel_1.getPackage().revert();
  				}
				
		}	
		

 

ok_Hash.put("tFileInputExcel_1", true);
end_Hash.put("tFileInputExcel_1", System.currentTimeMillis());




/**
 * [tFileInputExcel_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputExcel_1";

	

 



/**
 * [tFileInputExcel_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputExcel_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final imdb imdbClass = new imdb();

        int exitCode = imdbClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = imdb.class.getClassLoader().getResourceAsStream("tal1/imdb_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = imdb.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : imdb");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     474809 characters generated by Talend Open Studio for Data Integration 
 *     on the January 3, 2022 at 10:29:44 PM EET
 ************************************************************************************************/